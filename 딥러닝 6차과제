{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"딥러닝 6차과제","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPZvG81UclQulxcFtMDQQVM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-UniCQ5Upntc","executionInfo":{"status":"ok","timestamp":1636965973293,"user_tz":-540,"elapsed":3747,"user":{"displayName":"유정식","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13391733907528682049"}},"outputId":"d6c19a22-8569-44ea-d209-dba0701b4343"},"source":["# MNIST데이터를 불러오고 keras, layers, models를 import\n","from tensorflow.keras.datasets import mnist\n","from tensorflow import keras\n","from tensorflow.keras import layers, models\n","\n","# 데이터를 전처리\n","# 255로 나누는 이유? > 1보다 작은 숫자에서 훈련이 더욱 잘되고 빠르기 때문\n","(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n","train_images = train_images.reshape((60000, 28, 28, 1))\n","train_images = train_images.astype(\"float32\") / 255\n","test_images = test_images.reshape((10000, 28, 28, 1))\n","test_images = test_images.astype(\"float32\") / 255"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n","11501568/11490434 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","metadata":{"id":"O3OgWHrRp0a_"},"source":["# 합성곱신경망을 구현\n","model = models.Sequential()\n","model.add(layers.Conv2D(32, (3,3), activation = 'relu', input_shape = (28,28,1)))\n","model.add(layers.MaxPooling2D(2,2))\n","model.add(layers.Conv2D(64, (3,3), activation = 'relu'))\n","model.add(layers.MaxPooling2D(2,2))\n","model.add(layers.Conv2D(128, (3,3), activation = 'relu'))\n","model.add(layers.Flatten())\n","\n","# 히든레이어층을 추가\n","model.add(layers.Dense(64, activation = 'relu'))\n","model.add(layers.Dense(10, activation = 'softmax'))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tEbKpeqxp09t","executionInfo":{"status":"ok","timestamp":1636965978645,"user_tz":-540,"elapsed":9,"user":{"displayName":"유정식","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13391733907528682049"}},"outputId":"c9811731-aff8-4cc5-f88a-779de18b539b"},"source":["model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 26, 26, 32)        320       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 13, 13, 32)       0         \n"," )                                                               \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 11, 11, 64)        18496     \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 5, 5, 64)         0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 3, 3, 128)         73856     \n","                                                                 \n"," flatten (Flatten)           (None, 1152)              0         \n","                                                                 \n"," dense (Dense)               (None, 64)                73792     \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                650       \n","                                                                 \n","=================================================================\n","Total params: 167,114\n","Trainable params: 167,114\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CzS0D0cdp34h","executionInfo":{"status":"ok","timestamp":1636966062103,"user_tz":-540,"elapsed":83466,"user":{"displayName":"유정식","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13391733907528682049"}},"outputId":"b631e59c-0cee-493f-8611-a8f018f51b33"},"source":["# 모델 컴파일\n","model.compile(optimizer=\"rmsprop\",\n","    loss=\"sparse_categorical_crossentropy\",\n","    metrics=[\"accuracy\"])\n","\n","model.fit(train_images, train_labels, epochs=5, batch_size=100)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","600/600 [==============================] - 39s 14ms/step - loss: 0.1943 - accuracy: 0.9378\n","Epoch 2/5\n","600/600 [==============================] - 8s 14ms/step - loss: 0.0451 - accuracy: 0.9858\n","Epoch 3/5\n","600/600 [==============================] - 8s 14ms/step - loss: 0.0300 - accuracy: 0.9908\n","Epoch 4/5\n","600/600 [==============================] - 8s 14ms/step - loss: 0.0234 - accuracy: 0.9925\n","Epoch 5/5\n","600/600 [==============================] - 8s 14ms/step - loss: 0.0168 - accuracy: 0.9949\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fef501ca2d0>"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4m4cBDNmp8KD","executionInfo":{"status":"ok","timestamp":1636966063664,"user_tz":-540,"elapsed":1570,"user":{"displayName":"유정식","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13391733907528682049"}},"outputId":"d2c1114c-1cdf-47a9-9cc8-f8ffc4683221"},"source":["# 테스트셋을 통해 성능 확인\n","test_loss, test_acc = model.evaluate(test_images, test_labels)\n","print(test_acc)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 2s 4ms/step - loss: 0.0245 - accuracy: 0.9921\n","0.9921000003814697\n"]}]}]}