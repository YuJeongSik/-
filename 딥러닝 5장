{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/codingalzi/dlp/blob/master/notebooks/dlp05_fundamentals_of_ml.ipynb","timestamp":1634016828148}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"}},"cells":[{"cell_type":"markdown","metadata":{"id":"T4gDucGC_giN"},"source":["# 5장 머신러닝의 핵심 이슈"]},{"cell_type":"markdown","metadata":{"id":"wy3i7AIq_giQ"},"source":["**감사말**: 프랑소와 숄레의 [Deep Learning with Python, Second Edition](https://www.manning.com/books/deep-learning-with-python-second-edition?a_aid=keras&a_bid=76564dff) 3장에 사용된 코드에 대한 설명을 담고 있으며 텐서플로우 2.6 버전에서 작성되었습니다. 소스코드를 공개한 저자에게 감사드립니다.\n","\n","**tensorflow 버전과 GPU 확인**\n","- 구글 코랩 설정: '런타임 -> 런타임 유형 변경' 메뉴에서 GPU 지정 후 아래 명령어 실행 결과 확인\n","\n","    ```\n","    !nvidia-smi\n","    ```\n","\n","- 사용되는 tensorflow 버전 확인\n","\n","    ```python\n","    import tensorflow as tf\n","    tf.__version__\n","    ```\n","- tensorflow가 GPU를 사용하는지 여부 확인\n","\n","    ```python\n","    tf.config.list_physical_devices('GPU')\n","    ```"]},{"cell_type":"markdown","metadata":{"id":"DmJabVQa_giR"},"source":["## 주요 내용"]},{"cell_type":"markdown","metadata":{"id":"EYC2Ic5E_giR"},"source":["- 머신러닝의 핵심 이슈 이해: 모델 일반화와 모델 훈련 최적화 사이의 관계 조율\n","- 머신러닝 모델 평가 기법\n","- 모델 훈련 최적화 기법\n","- 모델 일반화 성능 향상 기법"]},{"cell_type":"markdown","metadata":{"id":"Os5hSTbY_giR"},"source":["## 5.1 머신러닝의 목표: 모델 일반화"]},{"cell_type":"markdown","metadata":{"id":"D1cGOsbx_giS"},"source":["훈련을 많이 할 수록 모델은 훈련 세트에 대해 보다 좋은 성능을 보이지만 새로운 데이터에 대한\n","성능은 점점 떨어지는 과대적합 현상이 언제나 발생한다.\n","머신러닝의 핵심 이슈는 모델 훈련의 **최적화**(optimization)와\n","모델 **일반화**(generalization) 사이의 관계를 적절히 조절하는 것이다.\n","\n","- **최적화**: 훈련 세트에 대해 가장 좋은 성능을 이끌어 내는 과정\n","- **일반화**: 처음 보는 데이터를 처리하는 모델의 능력"]},{"cell_type":"markdown","metadata":{"id":"W-OfOPED_giS"},"source":["### 과소적합과 과대적합"]},{"cell_type":"markdown","metadata":{"id":"uWLQABM5_giT"},"source":["- 과소적합\n","    - 훈련 초반\n","    - 훈련셋과 검증셋 모두에 대해 성능이 향상되는 과정\n","    - 신경망이 훈련셋의 패턴을 아직 덜 파악한 상태\n","\n","- 과대적합\n","    - 훈련셋 고유의 패턴을 학습하기 시작\n","    - 새로운 데이터와 무관하거나 혼동을 주는 패턴 학습"]},{"cell_type":"markdown","metadata":{"id":"a7gceL8iGGjM"},"source":["훈련세트는 손실값이 계속 감소하지만 검증세트는 어느 시점부터는 손실값이 증가한다. 이 지점부터 과대적합이 발생한다고 한다.\n"]},{"cell_type":"markdown","metadata":{"id":"Whye94x3_giT"},"source":["<div align=\"center\"><img src=\"https://drek4537l1klr.cloudfront.net/chollet2/v-7/Figures/typical_overfitting.png\" style=\"width:700px;\"></div>\n","\n","그림 출처: [Deep Learning with Python(Manning MEAP)](https://www.manning.com/books/deep-learning-with-python-second-edition)"]},{"cell_type":"markdown","metadata":{"id":"nXET07Xu_giU"},"source":["#### 일반화 성능이 좋은 모델 대 과대적합 모델"]},{"cell_type":"markdown","metadata":{"id":"_xKA_oPS_giU"},"source":["<div align=\"center\"><img src=\"https://drek4537l1klr.cloudfront.net/chollet2/v-7/Figures/outliers_and_overfitting.png\" style=\"width:660px;\"></div>\n","\n","그림 출처: [Deep Learning with Python(Manning MEAP)](https://www.manning.com/books/deep-learning-with-python-second-edition)"]},{"cell_type":"markdown","metadata":{"id":"Gqhhuv37_giU"},"source":["#### 과대적합 발생 주요 요인"]},{"cell_type":"markdown","metadata":{"id":"SLq4zVFd_giV"},"source":["과대적합을 발생시키는 요소는 크게 세 가지로 나뉜다."]},{"cell_type":"markdown","metadata":{"id":"DbIP1kf6_giV"},"source":["##### 첫째, 소음(noise) 섞인 훈련셋.\n","\n","- 적절하지 않은 데이터 또는 잘못된 레이블을 갖는 데이터 등을 **소음** 또는 **노이즈**(noise)라 부름.\n","- 적절하지 않은 데이터: 다음 MNNIST 이미지들처럼 불분명하면 특성 파악 어려움."]},{"cell_type":"markdown","metadata":{"id":"p-GhFasq_giV"},"source":["<div align=\"center\"><img src=\"https://drek4537l1klr.cloudfront.net/chollet2/v-7/Figures/fucked_up_mnist.png\" style=\"width:500px;\"></div>\n","\n","그림 출처: [Deep Learning with Python(Manning MEAP)](https://www.manning.com/books/deep-learning-with-python-second-edition)"]},{"cell_type":"markdown","metadata":{"id":"ekyYgjlg_giV"},"source":["- 잘못된 레이블: 예를 들어, 잘못 분류된 1처럼 생긴 이미지를 7로 잘못 분류할 가능성이 높아짐."]},{"cell_type":"markdown","metadata":{"id":"Hozb4cqT_giW"},"source":["<div align=\"center\"><img src=\"https://drek4537l1klr.cloudfront.net/chollet2/v-7/Figures/mislabeled_mnist.png\" style=\"width:660px;\"></div>\n","\n","그림 출처: [Deep Learning with Python(Manning MEAP)](https://www.manning.com/books/deep-learning-with-python-second-edition)"]},{"cell_type":"markdown","metadata":{"id":"1EpNhfuY_giW"},"source":["##### 둘째, 애매한 특성.\n","\n","- 소음이 전혀 없는 데이터라 하더라도 특정 특성 영역이 여러 레이블과 연관될 수 있음.\n","\n","- 예제: 붓꽃 데이터의 꽃잎 길이와 너비를 활용한\n","    버시컬러(versicolor) 품종과 버지니카(virginica) 품종의 완벽한 구분 불가능."]},{"cell_type":"markdown","metadata":{"id":"Z80Y7VQt_giW"},"source":["<div align=\"center\"><img src=\"https://codingalzi.github.io/handson-ml2/slides/images/ch05/homl05-03b.png\" style=\"width:500px;\"></div>"]},{"cell_type":"markdown","metadata":{"id":"1XqiSNN7_giW"},"source":["##### 셋째: 매우 드문 특성 또는 거짓 상관관계"]},{"cell_type":"markdown","metadata":{"id":"2kQGbhkU_giX"},"source":["- 매우 드문 특성\n","    - 예제: IMDB 데이터셋에서 매우 낮은 빈도로 사용되는 단어를 훈련셋에서 포함시키는 경우\n","        어쩌다 한 번 사용되는 특성으로 인해 잘못된 판단이 유도될 수 있음."]},{"cell_type":"markdown","metadata":{"id":"nA4ZyoJK_giX"},"source":["- 거짓된 상관관계를 유발하는 훈련셋\n","- 예제: MNIST 데이터셋에 **백색 소음**(white noise)이 포함된 데이터셋과 그렇지 않은 데이터셋 비교 참조."]},{"cell_type":"code","metadata":{"id":"lSTsbaav_giX"},"source":["from tensorflow.keras.datasets import mnist\n","import numpy as np\n","\n","# MNIST 데이터셋 적재 및 전처리\n","(train_images, train_labels), _ = mnist.load_data()\n","\n","train_images = train_images.reshape((60000, 28 * 28))\n","train_images = train_images.astype(\"float32\") / 255\n","\n","# 백색 소음 추가\n","train_images_with_noise_channels = np.concatenate(\n","    [train_images, np.random.random((len(train_images), 784))], axis=1)\n","\n","# 크기를 맞추기 위해 영 행렬 추가\n","train_images_with_zeros_channels = np.concatenate(\n","    [train_images, np.zeros((len(train_images), 784))], axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mWeTtLe__giY","outputId":"6b7ead92-8240-40e4-836e-83dc43649a66"},"source":["train_images_with_noise_channels.shape"],"execution_count":null,"outputs":[{"data":{"text/plain":["(60000, 1568)"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"code","metadata":{"id":"-ar0cYku_giZ","outputId":"48d04c4c-78df-43b8-ce38-61f7ca2a23d2"},"source":["train_images_with_zeros_channels.shape"],"execution_count":null,"outputs":[{"data":{"text/plain":["(60000, 1568)"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"markdown","metadata":{"id":"1E5BdYz5_giZ"},"source":["백색 소음이 들어간 샘플은 다음과 같이 보인다."]},{"cell_type":"code","metadata":{"id":"xpFM4fKj_giZ","outputId":"2cf78449-58a2-47c7-be55-f3475af5506f"},"source":["train_image_white4 = train_images_with_noise_channels[4].reshape((56, 28))\n","\n","import matplotlib.pyplot as plt\n","\n","digit = train_image_white4\n","plt.imshow(digit, cmap=plt.cm.binary)\n","plt.show()"],"execution_count":null,"outputs":[{"data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}]},{"cell_type":"markdown","metadata":{"id":"jfg2ZsKi_gia"},"source":["영 행렬이 추가된 샘플은 다음과 같이 보인다."]},{"cell_type":"code","metadata":{"id":"fhfNcypl_gia","outputId":"444fbf39-df4b-4969-f00e-e858647b10f0"},"source":["train_image_zeros4 = train_images_with_zeros_channels[4].reshape((56, 28))\n","\n","import matplotlib.pyplot as plt\n","\n","digit = train_image_zeros4\n","plt.imshow(digit, cmap=plt.cm.binary)\n","plt.show()"],"execution_count":null,"outputs":[{"data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}]},{"cell_type":"markdown","metadata":{"id":"Whv4EKrU_gia"},"source":["모델 구성과 컴파일을 함수를 이용하여 지정한다.\n","\n","- 정수 레이블을 사용하기에 손실함수로 `sparse_categorical_crossentropy` 지정해야 함."]},{"cell_type":"code","metadata":{"id":"ocU5WN_9_gia"},"source":["from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","def get_model():\n","    model = keras.Sequential([\n","        layers.Dense(512, activation=\"relu\"),\n","        layers.Dense(10, activation=\"softmax\")\n","    ])\n","\n","    model.compile(optimizer=\"rmsprop\",\n","                  loss=\"sparse_categorical_crossentropy\",\n","                  metrics=[\"accuracy\"])\n","\n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mSTl-l_w_gia"},"source":["- 백색 소음이 추가된 데이터셋 훈련\n","    - `validation_split`: 검증셋 비율 지정"]},{"cell_type":"code","metadata":{"id":"K6f_DBEK_gia","outputId":"16b24965-a68c-4e2d-b9e8-ec9952e88232"},"source":["# 모델 생성 및 훈련\n","model = get_model()\n","\n","history_noise = model.fit(\n","    train_images_with_noise_channels, train_labels,\n","    epochs=10,\n","    batch_size=128,\n","    validation_split=0.2)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","375/375 [==============================] - 3s 4ms/step - loss: 0.6309 - accuracy: 0.8112 - val_loss: 0.3331 - val_accuracy: 0.8964\n","Epoch 2/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.2431 - accuracy: 0.9241 - val_loss: 0.1763 - val_accuracy: 0.9468\n","Epoch 3/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.1570 - accuracy: 0.9515 - val_loss: 0.1601 - val_accuracy: 0.9526\n","Epoch 4/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.1130 - accuracy: 0.9647 - val_loss: 0.1261 - val_accuracy: 0.9622\n","Epoch 5/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.0837 - accuracy: 0.9734 - val_loss: 0.1248 - val_accuracy: 0.9624\n","Epoch 6/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.0602 - accuracy: 0.9806 - val_loss: 0.1742 - val_accuracy: 0.9490\n","Epoch 7/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.0459 - accuracy: 0.9850 - val_loss: 0.1491 - val_accuracy: 0.9600\n","Epoch 8/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.0342 - accuracy: 0.9893 - val_loss: 0.1371 - val_accuracy: 0.9658\n","Epoch 9/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.0263 - accuracy: 0.9915 - val_loss: 0.1253 - val_accuracy: 0.9678\n","Epoch 10/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.0195 - accuracy: 0.9933 - val_loss: 0.1786 - val_accuracy: 0.9584\n"]}]},{"cell_type":"markdown","metadata":{"id":"HIr32VfB_gib"},"source":["- 영 행렬이 추가된 데이터셋 훈련\n","    - `validation_split`: 검증셋 비율 지정"]},{"cell_type":"code","metadata":{"id":"D-ZQzenB_gib","outputId":"30ada4af-2d1c-4738-df16-042d21e5398a"},"source":["model = get_model()\n","history_zeros = model.fit(\n","    train_images_with_zeros_channels, train_labels,\n","    epochs=10,\n","    batch_size=128,\n","    validation_split=0.2)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","375/375 [==============================] - 2s 4ms/step - loss: 0.2860 - accuracy: 0.9175 - val_loss: 0.1618 - val_accuracy: 0.9525\n","Epoch 2/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.1187 - accuracy: 0.9650 - val_loss: 0.1039 - val_accuracy: 0.9695\n","Epoch 3/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.0781 - accuracy: 0.9768 - val_loss: 0.0893 - val_accuracy: 0.9737\n","Epoch 4/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.0557 - accuracy: 0.9837 - val_loss: 0.0837 - val_accuracy: 0.9763\n","Epoch 5/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.0415 - accuracy: 0.9878 - val_loss: 0.0809 - val_accuracy: 0.9762\n","Epoch 6/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.0320 - accuracy: 0.9910 - val_loss: 0.0839 - val_accuracy: 0.9763\n","Epoch 7/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.0243 - accuracy: 0.9928 - val_loss: 0.0855 - val_accuracy: 0.9767\n","Epoch 8/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.0181 - accuracy: 0.9950 - val_loss: 0.0820 - val_accuracy: 0.9790\n","Epoch 9/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.0141 - accuracy: 0.9960 - val_loss: 0.0847 - val_accuracy: 0.9789\n","Epoch 10/10\n","375/375 [==============================] - 1s 3ms/step - loss: 0.0107 - accuracy: 0.9969 - val_loss: 0.0938 - val_accuracy: 0.9782\n"]}]},{"cell_type":"markdown","metadata":{"id":"p5RFN-pn_gib"},"source":["- 정확도 비교: 백색 소음이 포함된 훈련셋을 이용한 모델의 정확도 성능이 1% 이상 낮음."]},{"cell_type":"code","metadata":{"id":"YA5XifW4_gib","outputId":"8b78764d-4b0b-47d7-98b3-be71e16e9941"},"source":["import matplotlib.pyplot as plt\n","\n","val_acc_noise = history_noise.history[\"val_accuracy\"]\n","val_acc_zeros = history_zeros.history[\"val_accuracy\"]\n","\n","epochs = range(1, 11)\n","\n","plt.plot(epochs, val_acc_noise, \"b-\",\n","         label=\"Validation accuracy with noise channels\")\n","\n","plt.plot(epochs, val_acc_zeros, \"b--\",\n","         label=\"Validation accuracy with zeros channels\")\n","\n","plt.title(\"Effect of noise channels on validation accuracy\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Accuracy\")\n","plt.legend()"],"execution_count":null,"outputs":[{"data":{"text/plain":["<matplotlib.legend.Legend at 0x2640e3cc9d0>"]},"execution_count":9,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}]},{"cell_type":"markdown","metadata":{"id":"J7WOcdLy_gic"},"source":["**특성 선택**\n","\n","- 과대적합 문제를 위해 훈련에 유용한 특성을 선택해야함.\n","    - IMDB 예제: 빈도수 10,000 등 이내의 단어만 사용\n","    - 백색 소음 예제: 백색 소음 부분 제거\n","- 하지만 유용한 특성을 선택하는 일이 기본적으로 불가능하거나 매우 어려움."]},{"cell_type":"markdown","metadata":{"id":"DUQLz_6c_gic"},"source":["### 딥러닝 모델 일반화의 핵심"]},{"cell_type":"markdown","metadata":{"id":"Bcu0U72w_gic"},"source":["아래 예제에서 확인할 수 있듯이 딥러닝 모델은 어떤 무엇도 학습할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"peSQ5Lix_gic"},"source":["**예제: MNIST 모델을 임의로 섞은 레이블과 함께 훈련시키기**\n","\n","아래 코드는 임의로 섞은 레이블을 이용하여 손글씨를 예측하는 모델을 훈련시킨다."]},{"cell_type":"code","metadata":{"id":"GCw5exUP_gic","outputId":"4c7ffd93-5fca-48f3-b469-0d032c68e637"},"source":["(train_images, train_labels), _ = mnist.load_data()\n","train_images = train_images.reshape((60000, 28 * 28))\n","train_images = train_images.astype(\"float32\") / 255\n","\n","random_train_labels = train_labels[:]\n","np.random.shuffle(random_train_labels)        #훈련 시작전에 레이블을 임의로 섞음\n","\n","model = keras.Sequential([\n","    layers.Dense(512, activation=\"relu\"),\n","    layers.Dense(10, activation=\"softmax\")\n","])\n","\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","\n","history = model.fit(train_images, random_train_labels,\n","                    epochs=100,\n","                    batch_size=128,\n","                    validation_split=0.2)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/100\n","375/375 [==============================] - 1s 3ms/step - loss: 2.3159 - accuracy: 0.1024 - val_loss: 2.3053 - val_accuracy: 0.1042\n","Epoch 2/100\n","375/375 [==============================] - 1s 3ms/step - loss: 2.3008 - accuracy: 0.1167 - val_loss: 2.3097 - val_accuracy: 0.1025\n","Epoch 3/100\n","375/375 [==============================] - 1s 3ms/step - loss: 2.2914 - accuracy: 0.1252 - val_loss: 2.3156 - val_accuracy: 0.0996\n","Epoch 4/100\n","375/375 [==============================] - 1s 3ms/step - loss: 2.2785 - accuracy: 0.1390 - val_loss: 2.3214 - val_accuracy: 0.1053\n","Epoch 5/100\n","375/375 [==============================] - 1s 3ms/step - loss: 2.2613 - accuracy: 0.1512 - val_loss: 2.3332 - val_accuracy: 0.1018\n","Epoch 6/100\n","375/375 [==============================] - 1s 3ms/step - loss: 2.2407 - accuracy: 0.1679 - val_loss: 2.3441 - val_accuracy: 0.1057\n","Epoch 7/100\n","375/375 [==============================] - 1s 3ms/step - loss: 2.2168 - accuracy: 0.1829 - val_loss: 2.3637 - val_accuracy: 0.1046\n","Epoch 8/100\n","375/375 [==============================] - 1s 3ms/step - loss: 2.1896 - accuracy: 0.1979 - val_loss: 2.3832 - val_accuracy: 0.0979\n","Epoch 9/100\n","375/375 [==============================] - 1s 3ms/step - loss: 2.1616 - accuracy: 0.2124 - val_loss: 2.3925 - val_accuracy: 0.1066\n","Epoch 10/100\n","375/375 [==============================] - 1s 3ms/step - loss: 2.1295 - accuracy: 0.2287 - val_loss: 2.4242 - val_accuracy: 0.1029\n","Epoch 11/100\n","375/375 [==============================] - 1s 3ms/step - loss: 2.0982 - accuracy: 0.2446 - val_loss: 2.4470 - val_accuracy: 0.1002\n","Epoch 12/100\n","375/375 [==============================] - 1s 3ms/step - loss: 2.0659 - accuracy: 0.2603 - val_loss: 2.4672 - val_accuracy: 0.1010\n","Epoch 13/100\n","375/375 [==============================] - 1s 3ms/step - loss: 2.0317 - accuracy: 0.2760 - val_loss: 2.4938 - val_accuracy: 0.1031\n","Epoch 14/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.9994 - accuracy: 0.2887 - val_loss: 2.5281 - val_accuracy: 0.1018\n","Epoch 15/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.9652 - accuracy: 0.3031 - val_loss: 2.5495 - val_accuracy: 0.1063\n","Epoch 16/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.9304 - accuracy: 0.3181 - val_loss: 2.5902 - val_accuracy: 0.0997\n","Epoch 17/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.8960 - accuracy: 0.3327 - val_loss: 2.6142 - val_accuracy: 0.1036\n","Epoch 18/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.8638 - accuracy: 0.3455 - val_loss: 2.6429 - val_accuracy: 0.1056\n","Epoch 19/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.8300 - accuracy: 0.3583 - val_loss: 2.6966 - val_accuracy: 0.0992\n","Epoch 20/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.8006 - accuracy: 0.3695 - val_loss: 2.7292 - val_accuracy: 0.1018\n","Epoch 21/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.7681 - accuracy: 0.3839 - val_loss: 2.7613 - val_accuracy: 0.1010\n","Epoch 22/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.7375 - accuracy: 0.3941 - val_loss: 2.7836 - val_accuracy: 0.1051\n","Epoch 23/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.7071 - accuracy: 0.4036 - val_loss: 2.8288 - val_accuracy: 0.1013\n","Epoch 24/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.6775 - accuracy: 0.4168 - val_loss: 2.8680 - val_accuracy: 0.1037\n","Epoch 25/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.6499 - accuracy: 0.4277 - val_loss: 2.9231 - val_accuracy: 0.1013\n","Epoch 26/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.6208 - accuracy: 0.4400 - val_loss: 2.9458 - val_accuracy: 0.1013\n","Epoch 27/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.5913 - accuracy: 0.4484 - val_loss: 2.9882 - val_accuracy: 0.1029\n","Epoch 28/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.5651 - accuracy: 0.4609 - val_loss: 3.0583 - val_accuracy: 0.1022\n","Epoch 29/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.5394 - accuracy: 0.4691 - val_loss: 3.0727 - val_accuracy: 0.1014\n","Epoch 30/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.5151 - accuracy: 0.4774 - val_loss: 3.1196 - val_accuracy: 0.1034\n","Epoch 31/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.4884 - accuracy: 0.4890 - val_loss: 3.1555 - val_accuracy: 0.1018\n","Epoch 32/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.4637 - accuracy: 0.4989 - val_loss: 3.1946 - val_accuracy: 0.1041\n","Epoch 33/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.4400 - accuracy: 0.5073 - val_loss: 3.2608 - val_accuracy: 0.1031\n","Epoch 34/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.4152 - accuracy: 0.5151 - val_loss: 3.2981 - val_accuracy: 0.1020\n","Epoch 35/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.3914 - accuracy: 0.5235 - val_loss: 3.3586 - val_accuracy: 0.1021\n","Epoch 36/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.3726 - accuracy: 0.5311 - val_loss: 3.3746 - val_accuracy: 0.1020\n","Epoch 37/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.3483 - accuracy: 0.5409 - val_loss: 3.4351 - val_accuracy: 0.1027\n","Epoch 38/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.3251 - accuracy: 0.5469 - val_loss: 3.4935 - val_accuracy: 0.0991\n","Epoch 39/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.3041 - accuracy: 0.5565 - val_loss: 3.5253 - val_accuracy: 0.1022\n","Epoch 40/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.2831 - accuracy: 0.5634 - val_loss: 3.5900 - val_accuracy: 0.0988\n","Epoch 41/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.2631 - accuracy: 0.5702 - val_loss: 3.6363 - val_accuracy: 0.0996\n","Epoch 42/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.2443 - accuracy: 0.5778 - val_loss: 3.6887 - val_accuracy: 0.1016\n","Epoch 43/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.2234 - accuracy: 0.5829 - val_loss: 3.7306 - val_accuracy: 0.1028\n","Epoch 44/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.2037 - accuracy: 0.5935 - val_loss: 3.8287 - val_accuracy: 0.0993\n","Epoch 45/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.1854 - accuracy: 0.5977 - val_loss: 3.8731 - val_accuracy: 0.0993\n","Epoch 46/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.1684 - accuracy: 0.6047 - val_loss: 3.8889 - val_accuracy: 0.0969\n","Epoch 47/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.1493 - accuracy: 0.6101 - val_loss: 3.9263 - val_accuracy: 0.1024\n","Epoch 48/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.1329 - accuracy: 0.6156 - val_loss: 4.0004 - val_accuracy: 0.0987\n","Epoch 49/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.1140 - accuracy: 0.6246 - val_loss: 4.0802 - val_accuracy: 0.1000\n","Epoch 50/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.0968 - accuracy: 0.6316 - val_loss: 4.1101 - val_accuracy: 0.1031\n","Epoch 51/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.0832 - accuracy: 0.6353 - val_loss: 4.1485 - val_accuracy: 0.0966\n","Epoch 52/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.0656 - accuracy: 0.6400 - val_loss: 4.1752 - val_accuracy: 0.1002\n","Epoch 53/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.0477 - accuracy: 0.6492 - val_loss: 4.2603 - val_accuracy: 0.0991\n","Epoch 54/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.0335 - accuracy: 0.6550 - val_loss: 4.2919 - val_accuracy: 0.0992\n","Epoch 55/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.0165 - accuracy: 0.6605 - val_loss: 4.3906 - val_accuracy: 0.1005\n","Epoch 56/100\n","375/375 [==============================] - 1s 3ms/step - loss: 1.0029 - accuracy: 0.6633 - val_loss: 4.4373 - val_accuracy: 0.0998\n","Epoch 57/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.9856 - accuracy: 0.6710 - val_loss: 4.4455 - val_accuracy: 0.0993\n"]},{"name":"stdout","output_type":"stream","text":["Epoch 58/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.9727 - accuracy: 0.6769 - val_loss: 4.5107 - val_accuracy: 0.1001\n","Epoch 59/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.9582 - accuracy: 0.6816 - val_loss: 4.5956 - val_accuracy: 0.1019\n","Epoch 60/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.9429 - accuracy: 0.6856 - val_loss: 4.6587 - val_accuracy: 0.0976\n","Epoch 61/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.9329 - accuracy: 0.6896 - val_loss: 4.7057 - val_accuracy: 0.1013\n","Epoch 62/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.9168 - accuracy: 0.6939 - val_loss: 4.7623 - val_accuracy: 0.1022\n","Epoch 63/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.9026 - accuracy: 0.6995 - val_loss: 4.7929 - val_accuracy: 0.1022\n","Epoch 64/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.8889 - accuracy: 0.7042 - val_loss: 4.8807 - val_accuracy: 0.0995\n","Epoch 65/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.8755 - accuracy: 0.7097 - val_loss: 4.9379 - val_accuracy: 0.1015\n","Epoch 66/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.8633 - accuracy: 0.7155 - val_loss: 5.0039 - val_accuracy: 0.1020\n","Epoch 67/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.8524 - accuracy: 0.7164 - val_loss: 5.0338 - val_accuracy: 0.0978\n","Epoch 68/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.8396 - accuracy: 0.7231 - val_loss: 5.1278 - val_accuracy: 0.1004\n","Epoch 69/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.8276 - accuracy: 0.7261 - val_loss: 5.1963 - val_accuracy: 0.1028\n","Epoch 70/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.8173 - accuracy: 0.7303 - val_loss: 5.2710 - val_accuracy: 0.1029\n","Epoch 71/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.8030 - accuracy: 0.7359 - val_loss: 5.2982 - val_accuracy: 0.1035\n","Epoch 72/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.7910 - accuracy: 0.7397 - val_loss: 5.3712 - val_accuracy: 0.1004\n","Epoch 73/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.7806 - accuracy: 0.7424 - val_loss: 5.4260 - val_accuracy: 0.0988\n","Epoch 74/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.7700 - accuracy: 0.7469 - val_loss: 5.4835 - val_accuracy: 0.0989\n","Epoch 75/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.7577 - accuracy: 0.7515 - val_loss: 5.5411 - val_accuracy: 0.0973\n","Epoch 76/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.7485 - accuracy: 0.7538 - val_loss: 5.6182 - val_accuracy: 0.0974\n","Epoch 77/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.7364 - accuracy: 0.7609 - val_loss: 5.6917 - val_accuracy: 0.1009\n","Epoch 78/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.7256 - accuracy: 0.7640 - val_loss: 5.7482 - val_accuracy: 0.1001\n","Epoch 79/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.7183 - accuracy: 0.7629 - val_loss: 5.8488 - val_accuracy: 0.1004\n","Epoch 80/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.7087 - accuracy: 0.7682 - val_loss: 5.8095 - val_accuracy: 0.1007\n","Epoch 81/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.6968 - accuracy: 0.7718 - val_loss: 5.9621 - val_accuracy: 0.1021\n","Epoch 82/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.6868 - accuracy: 0.7760 - val_loss: 6.0044 - val_accuracy: 0.1004\n","Epoch 83/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.6779 - accuracy: 0.7791 - val_loss: 6.0667 - val_accuracy: 0.1007\n","Epoch 84/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.6692 - accuracy: 0.7821 - val_loss: 6.1341 - val_accuracy: 0.1002\n","Epoch 85/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.6582 - accuracy: 0.7856 - val_loss: 6.1366 - val_accuracy: 0.1010\n","Epoch 86/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.6503 - accuracy: 0.7891 - val_loss: 6.2489 - val_accuracy: 0.0999\n","Epoch 87/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.6396 - accuracy: 0.7914 - val_loss: 6.3043 - val_accuracy: 0.1060\n","Epoch 88/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.6332 - accuracy: 0.7946 - val_loss: 6.4167 - val_accuracy: 0.1013\n","Epoch 89/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.6243 - accuracy: 0.7979 - val_loss: 6.4605 - val_accuracy: 0.1012\n","Epoch 90/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.6147 - accuracy: 0.8022 - val_loss: 6.5039 - val_accuracy: 0.1026\n","Epoch 91/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.6060 - accuracy: 0.8014 - val_loss: 6.5662 - val_accuracy: 0.1035\n","Epoch 92/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.5990 - accuracy: 0.8063 - val_loss: 6.6249 - val_accuracy: 0.1023\n","Epoch 93/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.5921 - accuracy: 0.8084 - val_loss: 6.6999 - val_accuracy: 0.1024\n","Epoch 94/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.5809 - accuracy: 0.8121 - val_loss: 6.7167 - val_accuracy: 0.1030\n","Epoch 95/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.5747 - accuracy: 0.8152 - val_loss: 6.9036 - val_accuracy: 0.1032\n","Epoch 96/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.5647 - accuracy: 0.8190 - val_loss: 6.9086 - val_accuracy: 0.0989\n","Epoch 97/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.5603 - accuracy: 0.8186 - val_loss: 6.9454 - val_accuracy: 0.0999\n","Epoch 98/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.5506 - accuracy: 0.8222 - val_loss: 7.0600 - val_accuracy: 0.1011\n","Epoch 99/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.5448 - accuracy: 0.8244 - val_loss: 7.0803 - val_accuracy: 0.1026\n","Epoch 100/100\n","375/375 [==============================] - 1s 3ms/step - loss: 0.5376 - accuracy: 0.8269 - val_loss: 7.1324 - val_accuracy: 0.0988\n"]}]},{"cell_type":"markdown","metadata":{"id":"JDIBI369_gid"},"source":["훈련셋에 대한 성능은 훈련하면서 계속 향상되지만 검증셋에 성능은 전혀 향상되지 않는다.\n","\n","**주의** 위 훈련을 계속하면서 훈련세트를 외워버려서 정확도가 올라가는 것이다\n","\n","mnist데이터는 다양체가 없기 때문에 성능향상이 없다"]},{"cell_type":"code","metadata":{"id":"-r1BqInt_gid","outputId":"59ed3d6f-bd14-4a21-b814-efa12cec66a7"},"source":["import matplotlib.pyplot as plt\n","\n","train_acc = history.history[\"accuracy\"]\n","val_acc = history.history[\"val_accuracy\"]\n","\n","epochs = range(1, 101)\n","\n","plt.plot(epochs, train_acc, \"b--\",\n","         label=\"Train accuracy\")\n","\n","plt.plot(epochs, val_acc, \"b-\",\n","         label=\"Validation accuracy\")\n","\n","plt.title(\"Shuffled MNIST Accuracy\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Accuracy\")\n","plt.legend()"],"execution_count":null,"outputs":[{"data":{"text/plain":["<matplotlib.legend.Legend at 0x26411768af0>"]},"execution_count":11,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}]},{"cell_type":"markdown","metadata":{"id":"_BfEHS2E_gie"},"source":["위 결과는 다음을 의미한다.\n","\n","- 일반화는 모델 훈련 과정 중에 제어할 수 있는 대상이 아니다.\n","- 모델 훈련을 통해 할 수 있는 것은 주어진 훈련 데이터셋에 모델이 적응하도록 하는 것 뿐이다.\n","- 딥러닝 모델은 어떤 데이터셋에도 적응할 수 있기에\n","    너무 오래 훈련시키면 과대적합은 반드시 발생하고 일반화는 어려워진다.\n","\n","**중요)** 결론적으로 **일반화**가 모델 보다는 사용되는 **데이터셋 내부에 존재하는 정보 구조**와\n","보다 밀접히 관련된다고 볼 수 있다."]},{"cell_type":"markdown","metadata":{"id":"xjjNaHzf_gie"},"source":["#### 다양체 가설"]},{"cell_type":"markdown","metadata":{"id":"CytQVCPM_gie"},"source":["일반적인 데이터셋은 고차원상에 존재하는 (저차원의) 연속이며 미분가능한 다양체를 구성한다는 가설이\n","**다양체 가설**(manifold hypothesis)이다.\n","그리고 모델 훈련은 바로 이 다양체를 찾아가는 과정이다.\n","\n","**참고**: 이런 의미에서 무작위로 섞은 레이블을 사용하는 위 MNIST 예제는 일반적인 데이터셋이 될 수 없다.\n","\n","아래 이미지는 3차원 공간에 존재하는 2차원 다양체를 고차원 상의 다양체로 변환하여 선형 분류가 가능한\n","데이터셋을 구성하는 과정을 보여준다."]},{"cell_type":"markdown","metadata":{"id":"WxO5HDz3_gie"},"source":["<div align=\"center\"><img src=\"https://codingalzi.github.io/handson-ml2/slides/images/ch08/homl08-13.png\" style=\"width:550px;\"></div>\n","\n","그림 출처: [핸즈온 머신러닝(2판), 8장](https://github.com/ageron/handson-ml2)"]},{"cell_type":"markdown","metadata":{"id":"1g-u_aeX_gie"},"source":["다양체 가설을 이용하면 적절하게 구성된 모델이 적절한 훈련셋으로 훈련받았을 때 새로운 데이터에 대해 적절한 예측을 할 수 있는 이유를 설명할 수 있다.\n","즉, 모델이 찾은 연속이며 미분가능한 다양체와 학습된 데이터 정보에 **보간법**을 적용하여 새로운 데이터에 대해 예측을 실행한다."]},{"cell_type":"markdown","metadata":{"id":"vU_JUMvY_gie"},"source":["#### 보간법"]},{"cell_type":"markdown","metadata":{"id":"yoIUBdei_gie"},"source":["**보간법**(interpolation)은 모델 훈련에 사용된 훈련셋의 데이터와 새로운 데이터를 연결하는\n","다양체 상의 경로를 이용하여 예측값을 실행하는 것을 의미한다.\n","보다 큰 훈련셋을 사용할 수록 보간법이 보다 잘 작동하지만\n","**차원의 저주**(curse of dimensions)로 인해 충분한 크기의 훈련셋 구하기가\n","일반적으로 불가능하거나 매우 어렵다.\n","\n","**쉽게말해, 알고있는 데이터를 기준으로 새로운 데이터에대한 예측을 하는 것이다. 훈련데이터가 많을수록 더 정확한 예측이 가능하다. 보간법이 가능하기 위해서는 다양체 가설을 만족해야한다.**\n","    \n","**참고**: 사람은 보간법 이외의 다른 능력을 사용하여 사물 예측과 구분, 주변 파악, 상황 판단 등\n","일반화를 실행한다."]},{"cell_type":"markdown","metadata":{"id":"mRjcwiHV_gie"},"source":["<div align=\"center\"><img src=\"https://drek4537l1klr.cloudfront.net/chollet2/v-7/Figures/dense_sampling.png\" style=\"width:660px;\"></div>\n","\n","그림 출처: [Deep Learning with Python(Manning MEAP)](https://www.manning.com/books/deep-learning-with-python-second-edition)"]},{"cell_type":"markdown","metadata":{"id":"60OdELy__gif"},"source":["#### 충분치 않은 훈련셋과 정규화\n","\n","충분히 큰 훈련셋을 준비하지 못하면 예측 과정에서 과대한 추측을 하게되어 과대적합이 발생할 가능성이 높다.\n","이를 방지하기 위해 일반적으로 두 가지 방법을 사용한다.\n","\n","- 모델에 저장되는 정보를 적절하게 조정하기\n","- 모델이 생성하는 다양체의 곡률 완화\n","\n","위 두 방법을 통해 데이터셋의 너무 세세한 패턴 보다는 가장 눈에 띄는 핵심적인 패턴에 모델이 집중하도록 한다.\n","이런식으로 과대적합을 방지하여 일반화를 향상시키는 기법을 **정규화**(regularization)이라 부른다."]},{"cell_type":"markdown","metadata":{"id":"18Cj88JF_gif"},"source":["## 5.2 모델 평가"]},{"cell_type":"markdown","metadata":{"id":"8Q_AsccE_gif"},"source":["모델의 일반화 능력을 향상시키려면 주어진 모델의 일반화 능력을 평가할 수 있어야 하며,\n","이를 위해 데이터셋을 훈련셋, 검증셋, 테스트셋으로 구분하는 이유를 먼저 알아야 한다.\n","\n","훈련을 통해 손실값은 계속해서 줄어들어야한다."]},{"cell_type":"markdown","metadata":{"id":"Cfs0v1SL_gif"},"source":["### 모델 튜닝과 정보 유출"]},{"cell_type":"markdown","metadata":{"id":"wx1TyL43_gif"},"source":["훈련셋, 테스트셋 이외에 검증셋을 사용해야 하는 이유는\n","무엇보다도 **최적의 모델을 구성할 때 검증셋에 대한 결과가 반영되기 때문**이다.\n","\n","테스트셋은 모델 구성과 훈련에 전혀 관여하지 않아야 한다.\n","따라서 구성된 모델의 성능을 평가하려면 테스트셋을 제외한 다른 데이터셋이 필요하고\n","이를 위해 훈련셋의 일부를 검증셋으로 활용한다.\n","검증셋은 훈련 과정 중에 일반화 성능을 테스트하는 용도로 사용되며\n","이를 통해 레이어 종류 및 개수, 레이어 별 유닛 개수 등 모델 구성에 필요한\n","**하이퍼파라미터**(hyperparameter)를 조정한다.\n","이것을 **모델 튜닝**(model tuning)이라 하며,\n","바로 이 모델 튜닝을 위해 검증셋이 사용되는 것이다.\n","\n","모델 튜닝도 모델의 좋은 하이퍼파라미터를 찾아가는 일종의 **학습**이다.\n","따라서 튜닝을 많이 하게되면 검증셋에 대한 과대적합이 발생한다.\n","다시 말해, 검증셋에 특화된 튜닝을 하게 되어 모델의 일반화 성능이 떨어질 수 있게 된다.\n","이런 현상을 **정보 유출**이라 부르는데,\n","이유는 튜닝을 하면 할 수록 검증셋에 대한 보다 많은 정보가 모델로 흘려들어가기 때문이다.\n","\n","**참고**: 하이퍼파라미터와 파라미터는 다르다.\n","파라미터(parameter)는 모델 훈련 중에 학습되는 가중치, 편향 등을 가리킨다."]},{"cell_type":"markdown","metadata":{"id":"qh5k1absBNzK"},"source":["테스트셋은 훈련과 검증을 끝낸뒤 마지막에 딱 한번 실행한다.\n","\n","하이퍼파라미터 조절은 검증세트를 토대로 조절한다"]},{"cell_type":"markdown","metadata":{"id":"oTEQFjg2_gif"},"source":["### 훈련셋, 검증셋, 테스트셋 분류 방법"]},{"cell_type":"markdown","metadata":{"id":"LM_zc_bS_gig"},"source":["데이터셋을 훈련셋, 검증셋, 테스트셋으로 분류하여 모델을 훈련을 진행하는\n","전형적인 방식 세 가지를 소개한다."]},{"cell_type":"markdown","metadata":{"id":"F4R6uogO_gig"},"source":["#### 홀드아웃(hold-out) 검증"]},{"cell_type":"markdown","metadata":{"id":"umiq1Ssl_gig"},"source":["훈련셋의 일부를 검증셋으로 사용하는 가장 일반적인 방법이며,\n","모델 훈련 후에 테스트셋을 이용하여 모델의 일반화 성능을 확인한다.\n","하지만 그 이후에 모델 튜닝을 진행하지 않아야 한다.\n","\n","일정한 훈련세트를 계속 사용한다"]},{"cell_type":"markdown","metadata":{"id":"FkD_LwbP_gig"},"source":["<div align=\"center\"><img src=\"https://drek4537l1klr.cloudfront.net/chollet2/v-7/Figures/holdout_validation.png\" style=\"width:400px;\"></div>\n","\n","그림 출처: [Deep Learning with Python(Manning MEAP)](https://www.manning.com/books/deep-learning-with-python-second-edition)"]},{"cell_type":"markdown","metadata":{"id":"c46W2qTN_gij"},"source":["홀드아웃 검증의 전형적인 패턴은 다음과 같다.\n","\n","---\n","```python\n","num_validation_samples = 10000\n","\n","np.random.shuffle(data)\n","\n","validation_data = data[:num_validation_samples]\n","training_data = data[num_validation_samples:]\n","\n","model = get_model()\n","model.fit(training_data, ...)\n","\n","validation_score = model.evaluate(validation_data, ...)\n","\n","...\n","\n","model = get_model()\n","model.fit(np.concatenate([training_data,\n","                          validation_data]), ...)\n","\n","test_score = model.evaluate(test_data, ...)\n","```\n","---"]},{"cell_type":"markdown","metadata":{"id":"vss64ye6_gik"},"source":["#### K-겹 교차검증"]},{"cell_type":"markdown","metadata":{"id":"q3KtXffz_gik"},"source":["모델의 성능이 사용되는 훈련셋에 따라 심하게 달라질 때 추천되는 검증기법이다.\n","\n","똑같은 데이터셋을 나눠 검증세트를 돌아가며 사용하는 방법이다"]},{"cell_type":"markdown","metadata":{"id":"61HUySFR_gik"},"source":["<div align=\"center\"><img src=\"https://drek4537l1klr.cloudfront.net/chollet2/v-7/Figures/k_fold_validation.png\" style=\"width:650px;\"></div>\n","\n","그림 출처: [Deep Learning with Python(Manning MEAP)](https://www.manning.com/books/deep-learning-with-python-second-edition)"]},{"cell_type":"markdown","metadata":{"id":"HO5vgHns_gik"},"source":["K-겹 교차검증의 전형적인 패턴은 다음과 같다.\n","\n","---\n","```python\n","k = 3        #3등분하겠다는 뜻이다\n","num_validation_samples = len(data) // k\n","\n","np.random.shuffle(data)\n","\n","validation_scores = []\n","\n","for fold in range(k):\n","    validation_data = data[num_validation_samples * fold:\n","                           num_validation_samples * (fold + 1)]\n","    training_data = np.concatenate(\n","        data[:num_validation_samples * fold],\n","        data[num_validation_samples * (fold + 1):])\n","    \n","    model = get_model()\n","    model.fit(training_data, ...)\n","    \n","    validation_score = model.evaluate(validation_data, ...)\n","    validation_scores.append(validation_score)\n","\n","validation_score = np.average(validation_scores)\n","\n","model = get_model()\n","model.fit(data, ...)\n","\n","test_score = model.evaluate(test_data, ...)\n","```\n","---"]},{"cell_type":"markdown","metadata":{"id":"eKhvmy1J_gik"},"source":["#### 반복 K-겹 교차검증"]},{"cell_type":"markdown","metadata":{"id":"z7dHl_EN_gil"},"source":["훈련셋의 크기가 너무 작거나 모델의 성능을 최대한 정확하게 평가하기 위해 사용된다.\n","K-겹 교차검증을 여러 번 실행한다. 대신 매번 훈련셋을 무작위로 섞은 뒤에\n","교차검증을 실행한다.\n","최종 결과는 각 교차검증의 평균값을 사용한다.\n","훈련 시간이 매우 오래 걸린다는 게 이 방법의 단점이다.\n","K-겹 교차 검증을 P번 반복하면 총 `P * K` 개의 모델을 훈련시키게 된다."]},{"cell_type":"markdown","metadata":{"id":"Wt6L-yxA_gil"},"source":["### 모델 성능 평가의 기준선(일반화 성능의 기준선)"]},{"cell_type":"markdown","metadata":{"id":"ipJVL7pM_gil"},"source":["모델 훈련이 시작되면 평가지표(metrics)를 지켜보는 일 이외에 할 수 있는 게 없다.\n","따라서 검증셋에 대한 평가지표가 특정 기준선 이상인지를 아는 게 매우 중요하다.\n","\n","기준선 예제\n","\n","- MNIST 데이터셋: 10%의 정확도\n","- IMDB 데이터셋: 50%의 정확도\n","- 로이터 통신 기사: 18-19의 정확도. 이런 경우 정밀도 등 정확도 이외의 다른 평가기준도 고려 가능.\n","\n","기준선을 넘는 모델을 생성하는 것이 기본 목표이어야 함.\n","그렇지 않다면 무언가 잘못된 모델을 또는 잘못된 접근법을 사용하고 있을 가능성이 큼."]},{"cell_type":"markdown","metadata":{"id":"RN4K12qU_gil"},"source":["### 데이터셋 준비 관련 주의사항"]},{"cell_type":"markdown","metadata":{"id":"nSrPMe7j_gil"},"source":["최적화된 모델 훈련을 위해 아래 세 가지 사항을 준수하며 훈련셋, 검증셋, 테스트셋을\n","준비해야 한다.\n","\n","- **대표성**: 일반적으로 데이터셋을 무작위로 섞어 레이블이 적절한 비율로 섞인\n","    훈련셋, 검증셋, 테스트셋을 구성해야 한다.\n","- **시간의 흐름**: 미래를 예측하는 모델을 훈련시킬 때, 테스트셋의 데이터는 훈련셋의 데이터보다\n","    시간상 뒤쪽에 위치하도록 해야 한다. 그렇지 않으면 미래 정보가 모델에 유출된다.\n","    즉, 데이터를 무작위로 섞어 훈련셋과 테스트셋으로 구분하는 일은 하지 않아야 한다.\n","- **중복 데이터 제거**: 훈련셋과 테스트셋에 동일한 데이터가 들어가지 않도록 중복 데이터를 제거해야 한다."]},{"cell_type":"markdown","metadata":{"id":"HfWdCQyrG9IY"},"source":["## 5.3 모델 훈련 개선법"]},{"cell_type":"markdown","metadata":{"id":"kpYnjQe8G9IY"},"source":["모델 훈련을 최적화하려면 먼저 과대적합을 달성해야 한다.\n","이유는 과대적합이 나타나야만 과대적합의 경계를 알아내서 모델 훈련을\n","언제 멈추어야 하는지 알 수 있기 때문이다.\n","일단 과대적합의 경계를 찾은 다음에 일반화 성능을 목표로 삼아야 한다.\n","\n","모델 훈련 중에 발생하는 문제는 크게 세 종류이다.\n","\n","- 첫째, 훈련셋의 손실값이 줄어들지 않아 훈련이 제대로 진행되지 않는 경우\n","- 둘째, 훈련셋의 손실값은 줄어들지만 검증셋의 성능은 평가 기준선을 넘지 못하는 경우\n","- 셋째, 훈련셋과 검증셋의 평가가 기준선을 넘어 계속 좋아지지만 과대적합이 발생하지 않는 경우"]},{"cell_type":"markdown","metadata":{"id":"rbuTdXlEG9IY"},"source":["### 첫째 경우: 경사하강법 관련 파라미터 조정"]},{"cell_type":"markdown","metadata":{"id":"lOfFU02NG9IY"},"source":["훈련셋의 손실값이 줄어들지 않거나 진동하는 등 훈련이 제대로 이루어지지 않는 경우는\n","기본적으로 학습률과 배치 크기를 조절하면 해결된다."]},{"cell_type":"markdown","metadata":{"id":"OrIBggTZG9Ia"},"source":["**MNIST 모델 훈련: 매우 큰 학습률 사용**\n","\n","- 학습률: 1 (옵티마이저의 옵션에서 지정)\n","- 훈련셋/검증셋에 대한 정확도가 30% 수준에 머무름."]},{"cell_type":"code","metadata":{"id":"fHV4raRTG9Ia","outputId":"21753d65-26c0-4e62-dfe3-a80080925f05"},"source":["(train_images, train_labels), _ = mnist.load_data()\n","train_images = train_images.reshape((60000, 28 * 28))\n","train_images = train_images.astype(\"float32\") / 255\n","\n","model = keras.Sequential([\n","    layers.Dense(512, activation=\"relu\"),\n","    layers.Dense(10, activation=\"softmax\")\n","])\n","model.compile(optimizer=keras.optimizers.RMSprop(1.),\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","model.fit(train_images, train_labels,\n","          epochs=10,\n","          batch_size=128,\n","          validation_split=0.2)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","375/375 [==============================] - 2s 4ms/step - loss: 1052.2745 - accuracy: 0.3604 - val_loss: 2.0373 - val_accuracy: 0.2853\n","Epoch 2/10\n","375/375 [==============================] - 1s 4ms/step - loss: 4.9106 - accuracy: 0.2501 - val_loss: 2.0671 - val_accuracy: 0.2453\n","Epoch 3/10\n","375/375 [==============================] - 1s 4ms/step - loss: 2.9203 - accuracy: 0.2402 - val_loss: 2.1236 - val_accuracy: 0.2192\n","Epoch 4/10\n","375/375 [==============================] - 1s 4ms/step - loss: 2.5024 - accuracy: 0.2362 - val_loss: 2.3967 - val_accuracy: 0.2854\n","Epoch 5/10\n","375/375 [==============================] - 1s 4ms/step - loss: 2.6780 - accuracy: 0.2364 - val_loss: 2.1830 - val_accuracy: 0.2910\n","Epoch 6/10\n","375/375 [==============================] - 1s 4ms/step - loss: 2.8584 - accuracy: 0.2582 - val_loss: 2.4019 - val_accuracy: 0.2674\n","Epoch 7/10\n","375/375 [==============================] - 1s 4ms/step - loss: 2.5525 - accuracy: 0.2406 - val_loss: 2.4998 - val_accuracy: 0.2412\n","Epoch 8/10\n","375/375 [==============================] - 1s 4ms/step - loss: 2.4591 - accuracy: 0.2324 - val_loss: 2.1182 - val_accuracy: 0.2267\n","Epoch 9/10\n","375/375 [==============================] - 1s 4ms/step - loss: 2.3558 - accuracy: 0.2535 - val_loss: 2.7957 - val_accuracy: 0.2347\n","Epoch 10/10\n","375/375 [==============================] - 1s 4ms/step - loss: 2.4698 - accuracy: 0.2403 - val_loss: 2.1845 - val_accuracy: 0.2557\n"]},{"data":{"text/plain":["<keras.callbacks.History at 0x7fa39afa9910>"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"markdown","metadata":{"id":"0M3HoTyDG9Ia"},"source":["<div align=\"center\"><img src=\"https://codingalzi.github.io/handson-ml2/slides/images/ch04/homl04-03.png\" style=\"width:550px;\"></div>\n","\n","그림 출처: [핸즈온 머신러닝(2판), 4장](https://github.com/ageron/handson-ml2)"]},{"cell_type":"markdown","metadata":{"id":"kQ4HCn_yG9Ia"},"source":["**MNIST 모델 훈련: 매우 작은 학습률 사용**\n","\n","- 학습률: 0.000001\n","- 검증셋에 대한 정확도가 느리게 증가함"]},{"cell_type":"code","metadata":{"id":"M96sYFC2G9Ib","outputId":"bf39295b-a866-4529-be3d-271b8f25bb3c"},"source":["(train_images, train_labels), _ = mnist.load_data()\n","train_images = train_images.reshape((60000, 28 * 28))\n","train_images = train_images.astype(\"float32\") / 255\n","\n","model = keras.Sequential([\n","    layers.Dense(512, activation=\"relu\"),\n","    layers.Dense(10, activation=\"softmax\")\n","])\n","model.compile(optimizer=keras.optimizers.RMSprop(1e-6),\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","model.fit(train_images, train_labels,\n","          epochs=10,\n","          batch_size=128,         #적절한 베치 사이즈를 잡는 것이 중요\n","          validation_split=0.2)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","375/375 [==============================] - 2s 4ms/step - loss: 2.2697 - accuracy: 0.1516 - val_loss: 2.2277 - val_accuracy: 0.1837\n","Epoch 2/10\n","375/375 [==============================] - 1s 4ms/step - loss: 2.1804 - accuracy: 0.2286 - val_loss: 2.1383 - val_accuracy: 0.2746\n","Epoch 3/10\n","375/375 [==============================] - 1s 4ms/step - loss: 2.0952 - accuracy: 0.3267 - val_loss: 2.0523 - val_accuracy: 0.3807\n","Epoch 4/10\n","375/375 [==============================] - 1s 4ms/step - loss: 2.0135 - accuracy: 0.4342 - val_loss: 1.9703 - val_accuracy: 0.4834\n","Epoch 5/10\n","375/375 [==============================] - 1s 4ms/step - loss: 1.9346 - accuracy: 0.5261 - val_loss: 1.8906 - val_accuracy: 0.5653\n","Epoch 6/10\n","375/375 [==============================] - 1s 4ms/step - loss: 1.8583 - accuracy: 0.5959 - val_loss: 1.8137 - val_accuracy: 0.6258\n","Epoch 7/10\n","375/375 [==============================] - 1s 4ms/step - loss: 1.7843 - accuracy: 0.6465 - val_loss: 1.7392 - val_accuracy: 0.6702\n","Epoch 8/10\n","375/375 [==============================] - 1s 4ms/step - loss: 1.7130 - accuracy: 0.6817 - val_loss: 1.6672 - val_accuracy: 0.6997\n","Epoch 9/10\n","375/375 [==============================] - 1s 4ms/step - loss: 1.6439 - accuracy: 0.7096 - val_loss: 1.5978 - val_accuracy: 0.7258\n","Epoch 10/10\n","375/375 [==============================] - 1s 4ms/step - loss: 1.5774 - accuracy: 0.7293 - val_loss: 1.5310 - val_accuracy: 0.7443\n"]},{"data":{"text/plain":["<keras.callbacks.History at 0x7fa385497250>"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"markdown","metadata":{"id":"0fsldy13G9Ib"},"source":["<div align=\"center\"><img src=\"https://codingalzi.github.io/handson-ml2/slides/images/ch04/homl04-02.png\" style=\"width:550px;\"></div>\n","\n","그림 출처: [핸즈온 머신러닝(2판), 4장](https://github.com/ageron/handson-ml2)"]},{"cell_type":"markdown","metadata":{"id":"8RP3UaZmG9Ib"},"source":["**MNIST 모델 훈련: 적절한 학습률 사용**\n","\n","- 학습률: 0.01\n","- 제대로 훈련됨."]},{"cell_type":"code","metadata":{"id":"PwBr7qD8G9Ib","outputId":"e9a41c4b-df73-4129-f2f5-413606166b14"},"source":["model = keras.Sequential([\n","    layers.Dense(512, activation=\"relu\"),\n","    layers.Dense(10, activation=\"softmax\")\n","])\n","model.compile(optimizer=keras.optimizers.RMSprop(1e-2),\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","model.fit(train_images, train_labels,\n","          epochs=10,\n","          batch_size=128,\n","          validation_split=0.2)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","375/375 [==============================] - 2s 4ms/step - loss: 0.3792 - accuracy: 0.9103 - val_loss: 0.1304 - val_accuracy: 0.9647\n","Epoch 2/10\n","375/375 [==============================] - 1s 4ms/step - loss: 0.1415 - accuracy: 0.9639 - val_loss: 0.1536 - val_accuracy: 0.9676\n","Epoch 3/10\n","375/375 [==============================] - 1s 4ms/step - loss: 0.1131 - accuracy: 0.9730 - val_loss: 0.2516 - val_accuracy: 0.9557\n","Epoch 4/10\n","375/375 [==============================] - 1s 4ms/step - loss: 0.0985 - accuracy: 0.9783 - val_loss: 0.2125 - val_accuracy: 0.9607\n","Epoch 5/10\n","375/375 [==============================] - 1s 4ms/step - loss: 0.0838 - accuracy: 0.9819 - val_loss: 0.1953 - val_accuracy: 0.9707\n","Epoch 6/10\n","375/375 [==============================] - 1s 4ms/step - loss: 0.0710 - accuracy: 0.9849 - val_loss: 0.2379 - val_accuracy: 0.9707\n","Epoch 7/10\n","375/375 [==============================] - 1s 4ms/step - loss: 0.0726 - accuracy: 0.9860 - val_loss: 0.2317 - val_accuracy: 0.9747\n","Epoch 8/10\n","375/375 [==============================] - 1s 4ms/step - loss: 0.0578 - accuracy: 0.9883 - val_loss: 0.3087 - val_accuracy: 0.9679\n","Epoch 9/10\n","375/375 [==============================] - 1s 4ms/step - loss: 0.0568 - accuracy: 0.9899 - val_loss: 0.2731 - val_accuracy: 0.9736\n","Epoch 10/10\n","375/375 [==============================] - 1s 4ms/step - loss: 0.0609 - accuracy: 0.9901 - val_loss: 0.3032 - val_accuracy: 0.9721\n"]},{"data":{"text/plain":["<keras.callbacks.History at 0x7fa3841ca210>"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"markdown","metadata":{"id":"mfGv8yhjG9Ib"},"source":["<div align=\"center\"><img src=\"https://codingalzi.github.io/handson-ml2/slides/images/ch04/homl04-01.png\" style=\"width:550px;\"></div>\n","\n","그림 출처: [핸즈온 머신러닝(2판), 4장](https://github.com/ageron/handson-ml2)"]},{"cell_type":"markdown","metadata":{"id":"JhgSZphxG9Ib"},"source":["**배치 크기 조정**\n","\n","- 학습률 이외에 배치크기를 키우면 보다 안정적으로 훈련이 됨. 단, 계산량이 많아질 수 있음.\n","- 아래 그림에서 확인할 수 있듯이, 배치 크기가 클 수록 보다 일관되게 학습됨.\n","- 진동이 클 경우 배치 크기를 키우는 것도 좋다"]},{"cell_type":"markdown","metadata":{"id":"_C15AnSIG9Ib"},"source":["<div align=\"center\"><img src=\"https://codingalzi.github.io/handson-ml2/slides/images/ch04/homl04-05.png\" style=\"width:550px;\"></div>\n","\n","그림 출처: [핸즈온 머신러닝(2판), 4장](https://github.com/ageron/handson-ml2)"]},{"cell_type":"markdown","metadata":{"id":"eCjmJUi4G9Ic"},"source":["### 둘째 경우: 보다 적절한 모델 사용"]},{"cell_type":"markdown","metadata":{"id":"pYMSDMA9G9Ic"},"source":["훈련은 잘 진행되는데 검증셋에 대한 성능이 좋아지지 않는다면 다음 두 가지 경우를 의심해 보아야 한다.\n","\n","- 좋은 예측값을 구성할 정도로 충분한 정보가 훈련셋에 담겨있지 않는 경우\n","    - 예제: 레이블이 무작위로 섞인 MNIST 데이터셋\n","- 사용하는 모델이 적절하지 않은 경우\n","    - 예제: 선형 분류가 불가능한 데이터셋에 선형분류 모델을 적용하는 경우\n","    - 예제: 시계열 데이터 분석에 앞서 살펴본 `Sequential` 모델을 사용하는 경우(나중에 확인할 것임)\n","    \n","기본적으로, 문제 해결을 위한 적절한 가정을 사용하는 모델을 훈련시켜야 한다.\n","앞으로 다양한 문제에 적용되는 다양한 모델 구성과 훈련을 살펴볼 것이다.\n","\n","이러한경우 근본적으로 무언가 잘못된 경우이다\n","\n","이럴때는 본인이 가지고 있는 데이터셋이 적절한가를 확인하고, 데이터를 확인한후 적절한 모델을 찾아봐야한다"]},{"cell_type":"markdown","metadata":{"id":"0AKk4kkJG9Ic"},"source":["### 셋째 경우: 모델의 저장 능력 조정"]},{"cell_type":"markdown","metadata":{"id":"oVOrlzVBG9Ic"},"source":["모델의 훈련셋/검증셋의 평가지표가 계속 향상되지만 과대적합이 발생하지 않는 경우\n","기본적으로 모델의 정보 저장 능력을 키워야 한다.\n","\n","먼저 아래 예제를 살펴보자."]},{"cell_type":"markdown","metadata":{"id":"gSC0cdG7G9Ic"},"source":["**MNIST 데이터셋 다중클래스 분류: 매우 단순한 모델**\n","\n","- 은닉층이 없이 출력층 하나만 사용하는 매우 단순한 모델.\n","- 검증셋의 정확도: 93% 정도에서 정체\n","- 검증셋의 손실값: 0.25 이하로 내려가지 않음.\n","\n","결론적으로 모델의 정보 저장/분석 능력이 떨어진다."]},{"cell_type":"code","metadata":{"id":"8izvG4VZG9Ic","outputId":"facd0f48-be76-419b-bc38-f0ed202a705b"},"source":["model = keras.Sequential([layers.Dense(10, activation=\"softmax\")])\n","\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","\n","history_small_model = model.fit(\n","    train_images, train_labels,\n","    epochs=20,\n","    batch_size=128,\n","    validation_split=0.2)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","375/375 [==============================] - 1s 1ms/step - loss: 0.6539 - accuracy: 0.8410 - val_loss: 0.3580 - val_accuracy: 0.9057\n","Epoch 2/20\n","375/375 [==============================] - 0s 794us/step - loss: 0.3504 - accuracy: 0.9039 - val_loss: 0.3074 - val_accuracy: 0.9145\n","Epoch 3/20\n","375/375 [==============================] - 0s 868us/step - loss: 0.3152 - accuracy: 0.9126 - val_loss: 0.2907 - val_accuracy: 0.9184\n","Epoch 4/20\n","375/375 [==============================] - 0s 796us/step - loss: 0.2994 - accuracy: 0.9170 - val_loss: 0.2811 - val_accuracy: 0.9213\n","Epoch 5/20\n","375/375 [==============================] - 0s 788us/step - loss: 0.2896 - accuracy: 0.9194 - val_loss: 0.2757 - val_accuracy: 0.9234\n","Epoch 6/20\n","375/375 [==============================] - 0s 829us/step - loss: 0.2832 - accuracy: 0.9214 - val_loss: 0.2719 - val_accuracy: 0.9248\n","Epoch 7/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.2784 - accuracy: 0.9229 - val_loss: 0.2705 - val_accuracy: 0.9260\n","Epoch 8/20\n","375/375 [==============================] - 0s 773us/step - loss: 0.2741 - accuracy: 0.9237 - val_loss: 0.2677 - val_accuracy: 0.9266\n","Epoch 9/20\n","375/375 [==============================] - 0s 795us/step - loss: 0.2715 - accuracy: 0.9249 - val_loss: 0.2655 - val_accuracy: 0.9277\n","Epoch 10/20\n","375/375 [==============================] - 0s 801us/step - loss: 0.2689 - accuracy: 0.9253 - val_loss: 0.2642 - val_accuracy: 0.9294\n","Epoch 11/20\n","375/375 [==============================] - 0s 784us/step - loss: 0.2667 - accuracy: 0.9270 - val_loss: 0.2647 - val_accuracy: 0.9289\n","Epoch 12/20\n","375/375 [==============================] - 0s 790us/step - loss: 0.2649 - accuracy: 0.9272 - val_loss: 0.2628 - val_accuracy: 0.9287\n","Epoch 13/20\n","375/375 [==============================] - 0s 836us/step - loss: 0.2635 - accuracy: 0.9276 - val_loss: 0.2626 - val_accuracy: 0.9291\n","Epoch 14/20\n","375/375 [==============================] - 0s 874us/step - loss: 0.2619 - accuracy: 0.9283 - val_loss: 0.2614 - val_accuracy: 0.9296\n","Epoch 15/20\n","375/375 [==============================] - 0s 776us/step - loss: 0.2605 - accuracy: 0.9286 - val_loss: 0.2618 - val_accuracy: 0.9302\n","Epoch 16/20\n","375/375 [==============================] - 0s 780us/step - loss: 0.2595 - accuracy: 0.9287 - val_loss: 0.2607 - val_accuracy: 0.9293\n","Epoch 17/20\n","375/375 [==============================] - 0s 796us/step - loss: 0.2586 - accuracy: 0.9293 - val_loss: 0.2622 - val_accuracy: 0.9303\n","Epoch 18/20\n","375/375 [==============================] - 0s 798us/step - loss: 0.2571 - accuracy: 0.9298 - val_loss: 0.2624 - val_accuracy: 0.9294\n","Epoch 19/20\n","375/375 [==============================] - 0s 817us/step - loss: 0.2568 - accuracy: 0.9306 - val_loss: 0.2607 - val_accuracy: 0.9305\n","Epoch 20/20\n","375/375 [==============================] - 0s 789us/step - loss: 0.2556 - accuracy: 0.9304 - val_loss: 0.2611 - val_accuracy: 0.9310\n"]}]},{"cell_type":"code","metadata":{"id":"1Rr_fqfNG9Ic","outputId":"de0d9823-e0de-43e6-d778-5acdb9b22e39"},"source":["import matplotlib.pyplot as plt\n","\n","val_loss = history_small_model.history[\"val_loss\"]\n","epochs = range(1, 21)\n","\n","plt.plot(epochs, val_loss, \"b--\",\n","         label=\"Validation loss\")\n","\n","plt.title(\"Effect of insufficient model capacity on validation loss\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend()"],"execution_count":null,"outputs":[{"data":{"text/plain":["<matplotlib.legend.Legend at 0x7fa373fde310>"]},"execution_count":16,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}]},{"cell_type":"markdown","metadata":{"id":"zGl0_glcG9Ic"},"source":["**MNIST 데이터셋 다중클래스 분류: 보다 많은 저장/분석/표현 능력 모델**\n","\n","- 두 개의 은닉층: 96개의 많은 유닛 사용\n","\n","잘 훈련되며 과대적합이 발생한다."]},{"cell_type":"code","metadata":{"id":"M-S1uI4GG9Ic","outputId":"5da0b02d-4690-47cc-ace1-9bfd07ba6b45"},"source":["model = keras.Sequential([\n","    layers.Dense(96, activation=\"relu\"),\n","    layers.Dense(96, activation=\"relu\"),\n","    layers.Dense(10, activation=\"softmax\"),\n","])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"sparse_categorical_crossentropy\",\n","              metrics=[\"accuracy\"])\n","history_large_model = model.fit(\n","    train_images, train_labels,\n","    epochs=20,\n","    batch_size=128,\n","    validation_split=0.2)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","375/375 [==============================] - 1s 2ms/step - loss: 0.3575 - accuracy: 0.9004 - val_loss: 0.1841 - val_accuracy: 0.9461\n","Epoch 2/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.1600 - accuracy: 0.9528 - val_loss: 0.1372 - val_accuracy: 0.9600\n","Epoch 3/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.1137 - accuracy: 0.9656 - val_loss: 0.1214 - val_accuracy: 0.9640\n","Epoch 4/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0875 - accuracy: 0.9734 - val_loss: 0.1049 - val_accuracy: 0.9674\n","Epoch 5/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0696 - accuracy: 0.9785 - val_loss: 0.1073 - val_accuracy: 0.9704\n","Epoch 6/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0565 - accuracy: 0.9831 - val_loss: 0.0958 - val_accuracy: 0.9728\n","Epoch 7/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0472 - accuracy: 0.9857 - val_loss: 0.0931 - val_accuracy: 0.9729\n","Epoch 8/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0400 - accuracy: 0.9873 - val_loss: 0.0988 - val_accuracy: 0.9732\n","Epoch 9/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0334 - accuracy: 0.9894 - val_loss: 0.0975 - val_accuracy: 0.9752\n","Epoch 10/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0286 - accuracy: 0.9912 - val_loss: 0.1008 - val_accuracy: 0.9754\n","Epoch 11/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0234 - accuracy: 0.9925 - val_loss: 0.1103 - val_accuracy: 0.9727\n","Epoch 12/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0198 - accuracy: 0.9938 - val_loss: 0.1063 - val_accuracy: 0.9741\n","Epoch 13/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0173 - accuracy: 0.9947 - val_loss: 0.1153 - val_accuracy: 0.9737\n","Epoch 14/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0146 - accuracy: 0.9955 - val_loss: 0.1081 - val_accuracy: 0.9772\n","Epoch 15/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0120 - accuracy: 0.9962 - val_loss: 0.1345 - val_accuracy: 0.9728\n","Epoch 16/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0107 - accuracy: 0.9963 - val_loss: 0.1362 - val_accuracy: 0.9732\n","Epoch 17/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0089 - accuracy: 0.9970 - val_loss: 0.1327 - val_accuracy: 0.9736\n","Epoch 18/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0072 - accuracy: 0.9975 - val_loss: 0.1242 - val_accuracy: 0.9777\n","Epoch 19/20\n","375/375 [==============================] - 1s 1ms/step - loss: 0.0077 - accuracy: 0.9976 - val_loss: 0.1291 - val_accuracy: 0.9761\n","Epoch 20/20\n","375/375 [==============================] - 0s 1ms/step - loss: 0.0058 - accuracy: 0.9982 - val_loss: 0.1379 - val_accuracy: 0.9747\n"]}]},{"cell_type":"markdown","metadata":{"id":"gHX0rWcIG9Id"},"source":["8 에포크 정도 지나면서 일반화 성능이 떨어진다."]},{"cell_type":"code","metadata":{"id":"UZpU2CpwG9Id","outputId":"7b2448df-3f09-48c5-e7a2-3e120f363487"},"source":["import matplotlib.pyplot as plt\n","\n","val_loss = history_large_model.history[\"val_loss\"]\n","epochs = range(1, 21)\n","\n","plt.plot(epochs, val_loss, \"b--\",\n","         label=\"Validation loss\")\n","\n","plt.title(\"Effect of insufficient model capacity on validation loss\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend()"],"execution_count":null,"outputs":[{"data":{"text/plain":["<matplotlib.legend.Legend at 0x7fa3d8b79c90>"]},"execution_count":18,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}]},{"cell_type":"markdown","metadata":{"id":"tVNSk4gMMWSV"},"source":["모델의 저장 능력을 키우면 학습을 잘하지만 과대적합의 위험성이 매우 높아진다"]},{"cell_type":"markdown","metadata":{"id":"zO36cOpTG9Id"},"source":["## 5.4 일반화 향상법"]},{"cell_type":"markdown","metadata":{"id":"b0LZmanBG9Id"},"source":["모델 훈련이 어느 정도 잘 진행되어 일반화 성능이 향상되고 과대적합이 발생하기 시작하면\n","일반화를 극대화하는 방법에 집중해야 한다.\n","이를 위해 아래 요소들이 제대로 작동하는지 확인해야 한다."]},{"cell_type":"markdown","metadata":{"id":"_Z_x5RXsG9Id"},"source":["- 데이터셋 큐레이션\n","- 특성 추출\n","- 조기 종료\n","- 규제"]},{"cell_type":"markdown","metadata":{"id":"df3D3moKG9Id"},"source":["### 데이터셋 큐레이션"]},{"cell_type":"markdown","metadata":{"id":"xeNr8m1nG9Ie"},"source":["양질의 데이터셋을 모델 훈련에 사용해야 모델이\n","데이터셋에 잠재되어 있는 다양체를 보다 잘 찾아낼 수 있다.\n","양질의 데이터를 보다 많이 수집하는 일이 보다 적절한 모델을 찾으려는 노력보다\n","값어치가 높다.\n","\n","양질의 데이터의 기준은 다음과 같다.\n","\n","- 충분한 양의 샘플(dense sampling): 훈련셋이 크면 클 수록 일반화 성능이 좋아짐.\n","- 레이블링 오류 최소화: 시각화를 통한 특이 사항 파악\n","- 데이터 클리닝과 결측치 처리(나중에 자세히 다룸)\n","- 유용한 특성 선택: 특성 수 감축"]},{"cell_type":"markdown","metadata":{"id":"PhP_vug7G9If"},"source":["### 특성 공학"]},{"cell_type":"markdown","metadata":{"id":"QMlXLYWQG9If"},"source":["신경망 모델은 데이터셋에 잠재되어 있는 다양체를 찾기 위해\n","여러 층을 통해 데이터셋의 표현을 다양한 방식으로 변환시킨다.\n","그렇게 해서 변환된 데이터셋의 표현들에 내재된 보다 쉽게 다양체를 찾아낸다.\n","\n","심층 신경망을 이용하는 이유가 모델 스스로 좋은 표현을 찾아내라고 유도하는 데에 있다.\n","즉, 모델 훈련에 가장 유용한 특성을 모델 스스로 직접 구성하도록 한다.\n","이런 점에서 적절한 심층 신경망을 구성하는 일이 중요하며\n","앞으로 다양한 문제를 다루면서 다양한 모델 구성과 훈련을 살펴볼 것이다.\n","\n","그럼에도 불구하고 모델 훈련 시작 전에 유용한 특성으로 이루어진 데이터셋으로\n","변환할 수 있다면 모델의 성능을 더더욱 높일 수 있다.\n","\n","- 모델 훈련이 보다 효율적으로 진행된다.\n","- 보다 적은 데이터를 이용하여 좋은 모델을 훈련할 수 있다.\n","\n","이처럼 모델 훈련에 가장 유용한 특성을 구성하는 작업을 **특성 공학**(feature engineering)이라 한다."]},{"cell_type":"markdown","metadata":{"id":"LAdvtOHCG9If"},"source":["### 조기 종료"]},{"cell_type":"markdown","metadata":{"id":"89Y6wbUxG9If"},"source":["모델 훈련 중에 검증셋에 대한 성능이 더 이상 좋아지지 않는 순간에 모델 훈련을 멈추는 것이\n","**조기 종료**(early stopping)이다.\n","이를 위해 에포크마다 모델의 성능을 측정하여 가장 좋은 성능의 모델을 기억해 두고,\n","더 이상 좋아지지 않으면 그때까지의 최적 모델을 사용하도록 한다.\n","\n","케라스의 경우 `EarlyStopping` 이라는 콜백(callback) 객체를 사용하면 조기 종료 기능을\n","자동으로 수행한다. 콜백에 대해서는 나중에 자세히 다룬다."]},{"cell_type":"markdown","metadata":{"id":"l-tWmF0nG9If"},"source":["### 규제"]},{"cell_type":"markdown","metadata":{"id":"zf6fa1CiG9If"},"source":["훈련 중이 모델이 데이터셋에 너무 민감하지 않게 유도하는 것을 **규제**(regularization)라 부른다.\n","즉, 모델 훈련에 규제를 가하여 모델을 보다 더 균형 있고 규칙적으로 예측하도록 유도하여\n","모델의 일반화 성능을 높힌다.\n","\n","여기서는 모델에 규제를 가하는 세 가지 기법을 IMDB 데이터셋을 이용하여 소개한다."]},{"cell_type":"markdown","metadata":{"id":"tsrhCXMjG9If"},"source":["#### 규제 기법 1: 신경망 크기 축소"]},{"cell_type":"markdown","metadata":{"id":"XUOE_aGLG9If"},"source":["앞서 보았듯이 모델을 층, 유닛의 수를 줄여 모델을 단순화 하면\n","과대적합이 없거나 줄어든다.\n","이유는 모델에 저장될 수 있는 정보량이 줄어들어 세세한 정보를 낱낱이 기억하기 보다는\n","보다 압축된 정보를 활용하도록 유도된다.\n","\n","모델이 너무 단순하면 아예 훈련이 제대로 되지 않을 수 있기에 적절하게 줄이도록 해야 한다.\n","하지만 이에 대한 이론적 기준은 없으며 실험을 통해 적절한 규제를 찾아내야 한다.\n","보통 적은 수의 층과 유닛을 사용하다가 점차 수를 늘려 나가는 것이 좋다.\n","\n","아래 코드는 이전에 다루었던 IMDB 데이터셋을 이용한 모델 훈련이다."]},{"cell_type":"code","metadata":{"id":"PlC82oPhG9Ih","outputId":"00aa2a8e-8d6f-43c3-8987-5c74b52d5b71"},"source":["from tensorflow.keras.datasets import imdb\n","(train_data, train_labels), _ = imdb.load_data(num_words=10000)\n","\n","def vectorize_sequences(sequences, dimension=10000):\n","    results = np.zeros((len(sequences), dimension))\n","    for i, sequence in enumerate(sequences):\n","        results[i, sequence] = 1.\n","    return results\n","\n","train_data = vectorize_sequences(train_data)\n","\n","model = keras.Sequential([\n","    layers.Dense(16, activation=\"relu\"),\n","    layers.Dense(16, activation=\"relu\"),\n","    layers.Dense(1, activation=\"sigmoid\")\n","])\n","\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"binary_crossentropy\",\n","              metrics=[\"accuracy\"])\n","\n","history_original = model.fit(train_data, train_labels,\n","                             epochs=20, batch_size=512, validation_split=0.4)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","30/30 [==============================] - 2s 39ms/step - loss: 0.5153 - accuracy: 0.7932 - val_loss: 0.3933 - val_accuracy: 0.8561\n","Epoch 2/20\n","30/30 [==============================] - 0s 13ms/step - loss: 0.3084 - accuracy: 0.9007 - val_loss: 0.3137 - val_accuracy: 0.8775\n","Epoch 3/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.2268 - accuracy: 0.9273 - val_loss: 0.2898 - val_accuracy: 0.8855\n","Epoch 4/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.1800 - accuracy: 0.9407 - val_loss: 0.2806 - val_accuracy: 0.8873\n","Epoch 5/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.1465 - accuracy: 0.9526 - val_loss: 0.2760 - val_accuracy: 0.8898\n","Epoch 6/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.1238 - accuracy: 0.9620 - val_loss: 0.2993 - val_accuracy: 0.8831\n","Epoch 7/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.1025 - accuracy: 0.9699 - val_loss: 0.3030 - val_accuracy: 0.8853\n","Epoch 8/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.0886 - accuracy: 0.9744 - val_loss: 0.3294 - val_accuracy: 0.8827\n","Epoch 9/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.0724 - accuracy: 0.9807 - val_loss: 0.3431 - val_accuracy: 0.8812\n","Epoch 10/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.0627 - accuracy: 0.9832 - val_loss: 0.3993 - val_accuracy: 0.8739\n","Epoch 11/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.0505 - accuracy: 0.9873 - val_loss: 0.3978 - val_accuracy: 0.8765\n","Epoch 12/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.0426 - accuracy: 0.9895 - val_loss: 0.4389 - val_accuracy: 0.8716\n","Epoch 13/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.0359 - accuracy: 0.9922 - val_loss: 0.5083 - val_accuracy: 0.8636\n","Epoch 14/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.0290 - accuracy: 0.9936 - val_loss: 0.4953 - val_accuracy: 0.8722\n","Epoch 15/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.0236 - accuracy: 0.9956 - val_loss: 0.5164 - val_accuracy: 0.8709\n","Epoch 16/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.0194 - accuracy: 0.9965 - val_loss: 0.5585 - val_accuracy: 0.8672\n","Epoch 17/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.0176 - accuracy: 0.9967 - val_loss: 0.5876 - val_accuracy: 0.8676\n","Epoch 18/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.0124 - accuracy: 0.9984 - val_loss: 0.6221 - val_accuracy: 0.8671\n","Epoch 19/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.0099 - accuracy: 0.9990 - val_loss: 0.6640 - val_accuracy: 0.8660\n","Epoch 20/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.0096 - accuracy: 0.9985 - val_loss: 0.6946 - val_accuracy: 0.8651\n"]}]},{"cell_type":"markdown","metadata":{"id":"q29QPR-zG9Ih"},"source":["은닉층의 유닛수를 4로 만들어보자."]},{"cell_type":"code","metadata":{"id":"FM47gCO4G9Ih","outputId":"364cd7a5-4a05-4495-b93c-87d6532bf5c3"},"source":["model = keras.Sequential([\n","    layers.Dense(4, activation=\"relu\"),\n","    layers.Dense(4, activation=\"relu\"),\n","    layers.Dense(1, activation=\"sigmoid\")\n","])\n","\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"binary_crossentropy\",\n","              metrics=[\"accuracy\"])\n","\n","history_smaller_model = model.fit(\n","    train_data, train_labels,\n","    epochs=20, batch_size=512, validation_split=0.4)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","30/30 [==============================] - 1s 21ms/step - loss: 0.6269 - accuracy: 0.6606 - val_loss: 0.5702 - val_accuracy: 0.7327\n","Epoch 2/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.5360 - accuracy: 0.7881 - val_loss: 0.5297 - val_accuracy: 0.7474\n","Epoch 3/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.4868 - accuracy: 0.8447 - val_loss: 0.4943 - val_accuracy: 0.8366\n","Epoch 4/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.4519 - accuracy: 0.8819 - val_loss: 0.4754 - val_accuracy: 0.8583\n","Epoch 5/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.4253 - accuracy: 0.9059 - val_loss: 0.4696 - val_accuracy: 0.8405\n","Epoch 6/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.4037 - accuracy: 0.9209 - val_loss: 0.4668 - val_accuracy: 0.8411\n","Epoch 7/20\n","30/30 [==============================] - 0s 10ms/step - loss: 0.3857 - accuracy: 0.9339 - val_loss: 0.4619 - val_accuracy: 0.8470\n","Epoch 8/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.3690 - accuracy: 0.9436 - val_loss: 0.4556 - val_accuracy: 0.8569\n","Epoch 9/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.3540 - accuracy: 0.9533 - val_loss: 0.4547 - val_accuracy: 0.8581\n","Epoch 10/20\n","30/30 [==============================] - 0s 14ms/step - loss: 0.3408 - accuracy: 0.9603 - val_loss: 0.4411 - val_accuracy: 0.8714\n","Epoch 11/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.3277 - accuracy: 0.9663 - val_loss: 0.4443 - val_accuracy: 0.8706\n","Epoch 12/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.3165 - accuracy: 0.9698 - val_loss: 0.4481 - val_accuracy: 0.8667\n","Epoch 13/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.3055 - accuracy: 0.9738 - val_loss: 0.4918 - val_accuracy: 0.8433\n","Epoch 14/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.2958 - accuracy: 0.9760 - val_loss: 0.4629 - val_accuracy: 0.8599\n","Epoch 15/20\n","30/30 [==============================] - 0s 10ms/step - loss: 0.2862 - accuracy: 0.9791 - val_loss: 0.4644 - val_accuracy: 0.8621\n","Epoch 16/20\n","30/30 [==============================] - 0s 11ms/step - loss: 0.2772 - accuracy: 0.9811 - val_loss: 0.5123 - val_accuracy: 0.8446\n","Epoch 17/20\n","30/30 [==============================] - 0s 10ms/step - loss: 0.2687 - accuracy: 0.9827 - val_loss: 0.5035 - val_accuracy: 0.8512\n","Epoch 18/20\n","30/30 [==============================] - 0s 10ms/step - loss: 0.2609 - accuracy: 0.9839 - val_loss: 0.4909 - val_accuracy: 0.8582\n","Epoch 19/20\n","30/30 [==============================] - 0s 10ms/step - loss: 0.2533 - accuracy: 0.9851 - val_loss: 0.4597 - val_accuracy: 0.8702\n","Epoch 20/20\n","30/30 [==============================] - 0s 10ms/step - loss: 0.2456 - accuracy: 0.9871 - val_loss: 0.5346 - val_accuracy: 0.8496\n"]}]},{"cell_type":"markdown","metadata":{"id":"m0WztudaG9Ih"},"source":["기존 모델과의 차이점은 다음과 같다.\n","\n","- 기존 모델보다 과대적합이 늦게 발생한다."]},{"cell_type":"markdown","metadata":{"id":"vCLBxYMZG9Ih"},"source":["<div align=\"center\"><img src=\"https://drek4537l1klr.cloudfront.net/chollet2/v-7/Figures/original_model_vs_smaller_model_imdb.png\" style=\"width:500px;\"></div>\n","\n","그림 출처: [Deep Learning with Python(Manning MEAP)](https://www.manning.com/books/deep-learning-with-python-second-edition)"]},{"cell_type":"markdown","metadata":{"id":"s0mUsOz5G9Ih"},"source":["이번엔 유닛 수를 크게 늘려보자."]},{"cell_type":"code","metadata":{"id":"lZocT95MG9Ii","outputId":"bf480f8d-9667-442b-d58b-a5e3bd04cca2"},"source":["model = keras.Sequential([\n","    layers.Dense(512, activation=\"relu\"),\n","    layers.Dense(512, activation=\"relu\"),\n","    layers.Dense(1, activation=\"sigmoid\")\n","])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"binary_crossentropy\",\n","              metrics=[\"accuracy\"])\n","history_larger_model = model.fit(\n","    train_data, train_labels,\n","    epochs=20, batch_size=512, validation_split=0.4)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","30/30 [==============================] - 3s 88ms/step - loss: 0.5572 - accuracy: 0.7635 - val_loss: 0.3305 - val_accuracy: 0.8637\n","Epoch 2/20\n","30/30 [==============================] - 2s 73ms/step - loss: 0.2560 - accuracy: 0.8967 - val_loss: 0.2690 - val_accuracy: 0.8922\n","Epoch 3/20\n","30/30 [==============================] - 2s 71ms/step - loss: 0.1563 - accuracy: 0.9407 - val_loss: 0.3348 - val_accuracy: 0.8725\n","Epoch 4/20\n","30/30 [==============================] - 2s 72ms/step - loss: 0.0597 - accuracy: 0.9795 - val_loss: 0.3978 - val_accuracy: 0.8843\n","Epoch 5/20\n","30/30 [==============================] - 2s 72ms/step - loss: 0.1047 - accuracy: 0.9769 - val_loss: 0.3745 - val_accuracy: 0.8896\n","Epoch 6/20\n","30/30 [==============================] - 2s 72ms/step - loss: 0.0034 - accuracy: 0.9995 - val_loss: 0.5210 - val_accuracy: 0.8879\n","Epoch 7/20\n","30/30 [==============================] - 2s 71ms/step - loss: 0.1402 - accuracy: 0.9781 - val_loss: 0.4680 - val_accuracy: 0.8837\n","Epoch 8/20\n","30/30 [==============================] - 2s 72ms/step - loss: 0.0015 - accuracy: 0.9999 - val_loss: 0.5193 - val_accuracy: 0.8873\n","Epoch 9/20\n","30/30 [==============================] - 2s 72ms/step - loss: 2.9514e-04 - accuracy: 1.0000 - val_loss: 0.6106 - val_accuracy: 0.8876\n","Epoch 10/20\n","30/30 [==============================] - 2s 72ms/step - loss: 7.8052e-05 - accuracy: 1.0000 - val_loss: 0.7125 - val_accuracy: 0.8858\n","Epoch 11/20\n","30/30 [==============================] - 2s 71ms/step - loss: 1.7741e-05 - accuracy: 1.0000 - val_loss: 0.8122 - val_accuracy: 0.8856\n","Epoch 12/20\n","30/30 [==============================] - 2s 71ms/step - loss: 6.3514e-06 - accuracy: 1.0000 - val_loss: 2.5362 - val_accuracy: 0.7682\n","Epoch 13/20\n","30/30 [==============================] - 2s 71ms/step - loss: 0.2807 - accuracy: 0.9818 - val_loss: 0.7594 - val_accuracy: 0.8817\n","Epoch 14/20\n","30/30 [==============================] - 2s 71ms/step - loss: 2.6955e-05 - accuracy: 1.0000 - val_loss: 0.7704 - val_accuracy: 0.8829\n","Epoch 15/20\n","30/30 [==============================] - 2s 73ms/step - loss: 1.2987e-05 - accuracy: 1.0000 - val_loss: 0.7956 - val_accuracy: 0.8840\n","Epoch 16/20\n","30/30 [==============================] - 2s 72ms/step - loss: 6.7362e-06 - accuracy: 1.0000 - val_loss: 0.8395 - val_accuracy: 0.8844\n","Epoch 17/20\n","30/30 [==============================] - 2s 73ms/step - loss: 3.1351e-06 - accuracy: 1.0000 - val_loss: 0.8974 - val_accuracy: 0.8858\n","Epoch 18/20\n","30/30 [==============================] - 2s 73ms/step - loss: 1.2273e-06 - accuracy: 1.0000 - val_loss: 0.9698 - val_accuracy: 0.8868\n","Epoch 19/20\n","30/30 [==============================] - 2s 73ms/step - loss: 4.4466e-07 - accuracy: 1.0000 - val_loss: 1.0506 - val_accuracy: 0.8864\n","Epoch 20/20\n","30/30 [==============================] - 2s 74ms/step - loss: 1.6740e-07 - accuracy: 1.0000 - val_loss: 1.1534 - val_accuracy: 0.8859\n"]}]},{"cell_type":"markdown","metadata":{"id":"x8l-rV6gG9Ii"},"source":["기존 모델과의 차이점은 다음과 같다.\n","\n","- 과대적합이 매우 빠르게 발생하며, 검증셋에 대한 성능이 매우 불안정하다.\n","\n","**주의사항**: 검증셋이 너무 작아도 매우 불안정스러울 수 있다."]},{"cell_type":"markdown","metadata":{"id":"shvaT5gmG9Ii"},"source":["<div align=\"center\"><img src=\"https://drek4537l1klr.cloudfront.net/chollet2/v-7/Figures/original_model_vs_larger_model_imdb.png\" style=\"width:500px;\"></div>\n","\n","그림 출처: [Deep Learning with Python(Manning MEAP)](https://www.manning.com/books/deep-learning-with-python-second-edition)"]},{"cell_type":"markdown","metadata":{"id":"bU700QgGG9Ii"},"source":["#### 규제 기법 2: 가중치 규제"]},{"cell_type":"markdown","metadata":{"id":"_Vtx_LuOG9Ii"},"source":["모델이 학습하는 파라미터(가중치와 편향)의 값이 작은 값을 갖도록 유도하는 기법이\n","**가중치 규제**(weight regularization)이며,\n","크게 두 종류가 있다.\n","\n","- L1 규제: 절댓값이 상대적으로 보다 작은 가중치를 보다 빠르게 0이 되도록 유도.\n","    즉, 덜 중요한 특성을 무시하도록 유도.\n","- L2 규제: 가중치가 작은 값을 갖도록 유도.\n","    즉, 특정 특성에 심하게 휘둘리지 않도록 유도.\n","\n","**참고**: L1 규제가 적용된 라쏘 회귀(Lasso regression)과 L2 규제가 적용된 릿지 회귀(Ridge regression)"]},{"cell_type":"markdown","metadata":{"id":"P9S71jymG9Ii"},"source":["<div align=\"center\"><img src=\"https://codingalzi.github.io/handson-ml2/slides/images/ch04/lasso_vs_ridge_plot.png\" style=\"width:550px;\"></div>\n","\n","그림 출처: [핸즈온 머신러닝(2판), 4장](https://github.com/ageron/handson-ml2)"]},{"cell_type":"markdown","metadata":{"id":"mBrm9FNMG9Ii"},"source":["아래 코드는 IMDB 훈련 모델에 L2 규제를 가한 결과를 보여준다.\n","\n","- `regularizers.l2(0.002)`: 각 가중치의 제곱에 0.002 곱하기\n","- 규제는 훈련 중에만 적용되며 테스트에는 사용되지 않음."]},{"cell_type":"markdown","metadata":{"id":"IybuhUDAQTEJ"},"source":["규제는 layer에 추가해주면 된다!"]},{"cell_type":"code","metadata":{"id":"e_fSJEr2G9Ij","outputId":"8fd2801f-c79b-4e7e-ff3e-cbe768034bf6"},"source":["from tensorflow.keras import regularizers\n","\n","model = keras.Sequential([\n","    layers.Dense(16,\n","                 kernel_regularizer=regularizers.l2(0.002),   #규제를 추가한 모습\n","                 activation=\"relu\"),                          #모든 가중치에 0.002를 곱한 모습\n","    layers.Dense(16,\n","                 kernel_regularizer=regularizers.l2(0.002),\n","                 activation=\"relu\"),\n","    layers.Dense(1, activation=\"sigmoid\")\n","])\n","\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"binary_crossentropy\",\n","              metrics=[\"accuracy\"])\n","\n","history_l2_reg = model.fit(\n","    train_data, train_labels,\n","    epochs=20, batch_size=512, validation_split=0.4)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","30/30 [==============================] - 2s 34ms/step - loss: 0.6023 - accuracy: 0.7710 - val_loss: 0.4744 - val_accuracy: 0.8630\n","Epoch 2/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.3990 - accuracy: 0.8978 - val_loss: 0.3953 - val_accuracy: 0.8819\n","Epoch 3/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.3301 - accuracy: 0.9161 - val_loss: 0.4116 - val_accuracy: 0.8601\n","Epoch 4/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2985 - accuracy: 0.9259 - val_loss: 0.3822 - val_accuracy: 0.8756\n","Epoch 5/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2757 - accuracy: 0.9331 - val_loss: 0.3550 - val_accuracy: 0.8863\n","Epoch 6/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2655 - accuracy: 0.9389 - val_loss: 0.3583 - val_accuracy: 0.8848\n","Epoch 7/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2526 - accuracy: 0.9412 - val_loss: 0.3646 - val_accuracy: 0.8826\n","Epoch 8/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2470 - accuracy: 0.9414 - val_loss: 0.3651 - val_accuracy: 0.8850\n","Epoch 9/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2363 - accuracy: 0.9462 - val_loss: 0.3846 - val_accuracy: 0.8773\n","Epoch 10/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2326 - accuracy: 0.9497 - val_loss: 0.3980 - val_accuracy: 0.8732\n","Epoch 11/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2292 - accuracy: 0.9491 - val_loss: 0.3812 - val_accuracy: 0.8823\n","Epoch 12/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2202 - accuracy: 0.9539 - val_loss: 0.3925 - val_accuracy: 0.8779\n","Epoch 13/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2205 - accuracy: 0.9536 - val_loss: 0.4643 - val_accuracy: 0.8575\n","Epoch 14/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2200 - accuracy: 0.9526 - val_loss: 0.4036 - val_accuracy: 0.8766\n","Epoch 15/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2133 - accuracy: 0.9545 - val_loss: 0.4253 - val_accuracy: 0.8719\n","Epoch 16/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2178 - accuracy: 0.9529 - val_loss: 0.3995 - val_accuracy: 0.8770\n","Epoch 17/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2047 - accuracy: 0.9593 - val_loss: 0.4038 - val_accuracy: 0.8761\n","Epoch 18/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2102 - accuracy: 0.9541 - val_loss: 0.4136 - val_accuracy: 0.8750\n","Epoch 19/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2099 - accuracy: 0.9559 - val_loss: 0.4683 - val_accuracy: 0.8627\n","Epoch 20/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2031 - accuracy: 0.9602 - val_loss: 0.4488 - val_accuracy: 0.8668\n"]}]},{"cell_type":"markdown","metadata":{"id":"cGrm9E1kG9Ij"},"source":["L2 규제를 가한 결과는 다음과 같다."]},{"cell_type":"markdown","metadata":{"id":"RTebJP8FG9Ij"},"source":["<div align=\"center\"><img src=\"https://drek4537l1klr.cloudfront.net/chollet2/v-7/Figures/original_model_vs_l2_regularized_model_imdb.png\" style=\"width:500px;\"></div>\n","\n","그림 출처: [Deep Learning with Python(Manning MEAP)](https://www.manning.com/books/deep-learning-with-python-second-edition)"]},{"cell_type":"markdown","metadata":{"id":"EeZHeNxPG9Ij"},"source":["`l2` 규제 대신에 `l1`, 또는 L1과 L2를 함께 사용하는 `l1_l2` 규제를 사용할 수 있다.\n","\n","```python\n","regularizers.l1(0.001)\n","regularizers.l1_l2(l1=0.001, l2=0.001)\n","```"]},{"cell_type":"markdown","metadata":{"id":"SzjiA3deG9Ij"},"source":["**참고**: 가중치 규제 기법은 보다 작은 크기의 딥러닝 모델에 효과적이다.\n","큰 딥러닝 모델에 대해서는 드롭아웃 기법이 보다 잘 작동한다."]},{"cell_type":"markdown","metadata":{"id":"aHFNYItuG9Ij"},"source":["#### 규제 기법 3: 드롭아웃 적용"]},{"cell_type":"markdown","metadata":{"id":"nlpl0l76G9Ij"},"source":["**드롭아웃**은 무작위로 선택된 일정한 비율의 유닛을 끄는 것을 의미한다.\n","즉, 해당 유닛에 저장된 값을 0으로 처리한다.\n","\n","- 적절한 드롭아웃 비율을 답은 드롭아웃 층을 적절한 위치에 추가한다.\n","\n","- 검증셋에 대해서는 드롭아웃을 적용하지 않는다. 대신 출력값을 지정된 비율만큼 줄인다.\n","    그래야 층에서 층으로 전달되는 값의 크기가 훈련할 때와 비슷하게 유지되기 때문이다.\n","    \n","아래 코드는 IMDB 데이터셋에 드롯아웃을 적용하여 훈련한다."]},{"cell_type":"code","metadata":{"id":"qcH5KDaEG9Ij","outputId":"6fd6d789-4da2-4861-e478-040e6768d8ca"},"source":["model = keras.Sequential([\n","    layers.Dense(16, activation=\"relu\"),\n","    layers.Dropout(0.5),\n","    layers.Dense(16, activation=\"relu\"),\n","    layers.Dropout(0.5),\n","    layers.Dense(1, activation=\"sigmoid\")\n","])\n","model.compile(optimizer=\"rmsprop\",\n","              loss=\"binary_crossentropy\",\n","              metrics=[\"accuracy\"])\n","history_dropout = model.fit(\n","    train_data, train_labels,\n","    epochs=20, batch_size=512, validation_split=0.4)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","30/30 [==============================] - 1s 35ms/step - loss: 0.6332 - accuracy: 0.6373 - val_loss: 0.5116 - val_accuracy: 0.8513\n","Epoch 2/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.5115 - accuracy: 0.7645 - val_loss: 0.4120 - val_accuracy: 0.8725\n","Epoch 3/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.4286 - accuracy: 0.8241 - val_loss: 0.3393 - val_accuracy: 0.8822\n","Epoch 4/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.3633 - accuracy: 0.8619 - val_loss: 0.2936 - val_accuracy: 0.8875\n","Epoch 5/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.3172 - accuracy: 0.8840 - val_loss: 0.2843 - val_accuracy: 0.8866\n","Epoch 6/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2727 - accuracy: 0.9035 - val_loss: 0.2721 - val_accuracy: 0.8911\n","Epoch 7/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2486 - accuracy: 0.9129 - val_loss: 0.2784 - val_accuracy: 0.8914\n","Epoch 8/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.2167 - accuracy: 0.9263 - val_loss: 0.2902 - val_accuracy: 0.8904\n","Epoch 9/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.1947 - accuracy: 0.9321 - val_loss: 0.3019 - val_accuracy: 0.8910\n","Epoch 10/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.1727 - accuracy: 0.9411 - val_loss: 0.3191 - val_accuracy: 0.8859\n","Epoch 11/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.1578 - accuracy: 0.9461 - val_loss: 0.3230 - val_accuracy: 0.8883\n","Epoch 12/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.1472 - accuracy: 0.9523 - val_loss: 0.3525 - val_accuracy: 0.8882\n","Epoch 13/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.1346 - accuracy: 0.9528 - val_loss: 0.3735 - val_accuracy: 0.8882\n","Epoch 14/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.1237 - accuracy: 0.9561 - val_loss: 0.4016 - val_accuracy: 0.8887\n","Epoch 15/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.1135 - accuracy: 0.9629 - val_loss: 0.4250 - val_accuracy: 0.8887\n","Epoch 16/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.1029 - accuracy: 0.9625 - val_loss: 0.4592 - val_accuracy: 0.8888\n","Epoch 17/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.1005 - accuracy: 0.9665 - val_loss: 0.4858 - val_accuracy: 0.8880\n","Epoch 18/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.0940 - accuracy: 0.9679 - val_loss: 0.4944 - val_accuracy: 0.8860\n","Epoch 19/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.0872 - accuracy: 0.9675 - val_loss: 0.5313 - val_accuracy: 0.8887\n","Epoch 20/20\n","30/30 [==============================] - 0s 12ms/step - loss: 0.0854 - accuracy: 0.9676 - val_loss: 0.5591 - val_accuracy: 0.8858\n"]}]},{"cell_type":"markdown","metadata":{"id":"WoqfsSzEG9Ik"},"source":["50%의 드롭아웃을 적용한 결과는 다음과 같다."]},{"cell_type":"markdown","metadata":{"id":"MoCM-5aXG9Ik"},"source":["<div align=\"center\"><img src=\"https://drek4537l1klr.cloudfront.net/chollet2/v-7/Figures/original_model_vs_dropout_regularized_model_imdb.png\" style=\"width:500px;\"></div>\n","\n","그림 출처: [Deep Learning with Python(Manning MEAP)](https://www.manning.com/books/deep-learning-with-python-second-edition)"]}]}