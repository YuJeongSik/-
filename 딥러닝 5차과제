{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"딥러닝 5차과제","provenance":[{"file_id":"https://github.com/codingalzi/dlp/blob/master/excs/exc08_intro_to_dl_for_computer_vision.ipynb","timestamp":1636542249176}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"}},"cells":[{"cell_type":"markdown","metadata":{"id":"iqMm750RhNo-"},"source":["# 연습문제: 8장 합성곱 신경망 - 컴퓨터 비전"]},{"cell_type":"code","metadata":{"id":"j3xl1kRgysHq"},"source":["from tensorflow import keras\n","from tensorflow.keras import layers"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vXTR2uwvysIU","outputId":"0b435c7a-3211-40e9-e0be-f1dabad9ce30"},"source":["conv_base = keras.applications.vgg16.VGG16(\n","    weights=\"imagenet\",\n","    include_top=False,\n","    input_shape=(180, 180, 3))"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n","58892288/58889256 [==============================] - 3s 0us/step\n","58900480/58889256 [==============================] - 3s 0us/step\n"]}]},{"cell_type":"markdown","metadata":{"id":"ifj0p4kUhNpG"},"source":["불러온 VGG16 모델의 기저를 요약하면 다음과 같다."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SldlejUmysIV","outputId":"e1ec8312-5ca2-4659-9100-6946eea01ebf"},"source":["conv_base.summary()"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"vgg16\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_1 (InputLayer)         [(None, 180, 180, 3)]     0         \n","_________________________________________________________________\n","block1_conv1 (Conv2D)        (None, 180, 180, 64)      1792      \n","_________________________________________________________________\n","block1_conv2 (Conv2D)        (None, 180, 180, 64)      36928     \n","_________________________________________________________________\n","block1_pool (MaxPooling2D)   (None, 90, 90, 64)        0         \n","_________________________________________________________________\n","block2_conv1 (Conv2D)        (None, 90, 90, 128)       73856     \n","_________________________________________________________________\n","block2_conv2 (Conv2D)        (None, 90, 90, 128)       147584    \n","_________________________________________________________________\n","block2_pool (MaxPooling2D)   (None, 45, 45, 128)       0         \n","_________________________________________________________________\n","block3_conv1 (Conv2D)        (None, 45, 45, 256)       295168    \n","_________________________________________________________________\n","block3_conv2 (Conv2D)        (None, 45, 45, 256)       590080    \n","_________________________________________________________________\n","block3_conv3 (Conv2D)        (None, 45, 45, 256)       590080    \n","_________________________________________________________________\n","block3_pool (MaxPooling2D)   (None, 22, 22, 256)       0         \n","_________________________________________________________________\n","block4_conv1 (Conv2D)        (None, 22, 22, 512)       1180160   \n","_________________________________________________________________\n","block4_conv2 (Conv2D)        (None, 22, 22, 512)       2359808   \n","_________________________________________________________________\n","block4_conv3 (Conv2D)        (None, 22, 22, 512)       2359808   \n","_________________________________________________________________\n","block4_pool (MaxPooling2D)   (None, 11, 11, 512)       0         \n","_________________________________________________________________\n","block5_conv1 (Conv2D)        (None, 11, 11, 512)       2359808   \n","_________________________________________________________________\n","block5_conv2 (Conv2D)        (None, 11, 11, 512)       2359808   \n","_________________________________________________________________\n","block5_conv3 (Conv2D)        (None, 11, 11, 512)       2359808   \n","_________________________________________________________________\n","block5_pool (MaxPooling2D)   (None, 5, 5, 512)         0         \n","=================================================================\n","Total params: 14,714,688\n","Trainable params: 14,714,688\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"7C-i9xhHhNpH"},"source":["## 문제 1\n","\n","`conv_base.summary`의 `Output Shape`에 사용된 각 숫자가\n","유추되는 되는 과정을 차례대로 모두 설명하라.\n","\n","* input_1 (InputLayer) [(None, 180, 180, 3)] > 입력층에 180, 180, 3 모형이 들어옴\n","* block1_conv1 (Conv2D) (None, 180, 180, 64) > Conv2D에 의해 (178, 178, 64)로 바껴야 하지만 패딩기법을 사용하여 (180, 180, 64) 모양을 유지하게 된다.\n","* block1_conv2 (Conv2D) (None, 180, 180, 64) > Conv2D에 의해 (178, 178, 64)로 바껴야 하지만 패딩기법을 사용하여 (180, 180, 64) 모양을 유지하게 된다.\n","* block1_pool (MaxPooling2D) (None, 90, 90, 64) > MaxPooling2D에 의해 (180, 180, 64)이 (90, 90, 64)로 바뀌었다.\n","* block_conv와 block_pool은 묶음단위로 반복되며 묶음단위의 block1_conv와 block_pool은 모두 위와같은 과정으로 똑같이 진행된다.   \n","\n","Conv2D는 신경망 합성곱에서 사용한다. Kernel_size에 따라서 줄어드는 모양이 달라진다. (28,28) 모양에 Kernel_size가 3이라면 (26,26)으로 바뀌고 Kernel_size가 4라면 (25,25)으로 바뀐다.   \n","\n","MaxPooling은 필터를 적용시킬 때 겹치지 않게 한다. 따라서 pool_size = 2이면 모양의 크기가 절반으로 줄어든다.   \n","\n","패딩이 있을경우에는 출력 특성맵의 깊이와 너비가 동일하게 유지된다."]}]}