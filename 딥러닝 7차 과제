{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"딥러닝 7차 과제","provenance":[{"file_id":"https://github.com/codingalzi/dlp/blob/master/excs/exc10_LSTM.ipynb","timestamp":1638169897435}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"}},"cells":[{"cell_type":"markdown","metadata":{"id":"w4y0_jswh8Uo"},"source":["# 연습문제: LSTM 모델 성능 향상시키기"]},{"cell_type":"markdown","metadata":{"id":"nu3eTQKsh8Ur"},"source":["## 문제 1\n","\n","예나(Jena) 도시의 날씨 데이터를 활용하여 LSTM 또는 GRU 모델을 구현한 후\n","성능을 최대한 끌어올리는 과정을 묘사하라.\n","\n","- 층의 유닛 개수 및 드랍아웃 비율 조정\n","- RMSprop 등의 옵티마이저의 학습률 조정 및 다른 옵티마이저 활용\n","- 순환층 이후에 여러 개의 밀집층 적용\n","- 시퀀스 길이 조정, 샘플 선택 비율 조정 등 기타 특성 엔지니어링 시도.\n","\n","**참고**: [10장 시계열 데이터와 순환 신경망](https://codingalzi.github.io/dlp/notebooks/dlp10_dl_for_timeseries.html)\n","\n","**힌트**: `recurrent_dropout` 옵션을 사용할 경우 `unroll=True` 옵션을 함께\n","활용해야 GPU를 활용할 수 있다. \n","하나의 시퀀스 길이가 100 이하로 지정되어야 함에 주의하라."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oicda5npitWm","executionInfo":{"status":"ok","timestamp":1638182150483,"user_tz":-540,"elapsed":2050,"user":{"displayName":"유정식","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13391733907528682049"}},"outputId":"f4a8709e-f454-4fa6-e3c1-7367242d38c3"},"source":["if 'google.colab' in str(get_ipython()):\n","    !wget https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip\n","    !unzip jena_climate_2009_2016.csv.zip\n","else: \n","    try: \n","        import wget, zipfile\n","    except ModuleNotFoundError: \n","        !pip install wget\n","        \n","    import wget, zipfile\n","    wget.download('https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip')\n","    with zipfile.ZipFile('jena_climate_2009_2016.csv.zip', 'r') as zip_ref:\n","        zip_ref.extractall('./')"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["--2021-11-29 10:35:25--  https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip\n","Resolving s3.amazonaws.com (s3.amazonaws.com)... 52.217.80.190\n","Connecting to s3.amazonaws.com (s3.amazonaws.com)|52.217.80.190|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 13565642 (13M) [application/zip]\n","Saving to: ‘jena_climate_2009_2016.csv.zip’\n","\n","jena_climate_2009_2 100%[===================>]  12.94M  13.2MB/s    in 1.0s    \n","\n","2021-11-29 10:35:27 (13.2 MB/s) - ‘jena_climate_2009_2016.csv.zip’ saved [13565642/13565642]\n","\n","Archive:  jena_climate_2009_2016.csv.zip\n","  inflating: jena_climate_2009_2016.csv  \n","  inflating: __MACOSX/._jena_climate_2009_2016.csv  \n"]}]},{"cell_type":"code","metadata":{"id":"Yn64xnv0iuzs","executionInfo":{"status":"ok","timestamp":1638182151358,"user_tz":-540,"elapsed":877,"user":{"displayName":"유정식","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13391733907528682049"}}},"source":["import os\n","fname = os.path.join(\"jena_climate_2009_2016.csv\")\n","\n","with open(fname) as f:\n","    data = f.read()\n","\n","lines = data.split(\"\\n\")"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"el75jeRCiv25","executionInfo":{"status":"ok","timestamp":1638182151359,"user_tz":-540,"elapsed":2,"user":{"displayName":"유정식","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13391733907528682049"}}},"source":["header = lines[0].split(\",\")\n","lines = lines[1:]"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"gKa0u8L-izab","executionInfo":{"status":"ok","timestamp":1638182153640,"user_tz":-540,"elapsed":2282,"user":{"displayName":"유정식","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13391733907528682049"}}},"source":["# 넘파이 어레이로 변환\n","\n","import numpy as np\n","\n","temperature = np.zeros((len(lines),))\n","raw_data = np.zeros((len(lines), len(header) - 1))\n","\n","for i, line in enumerate(lines):\n","    values = [float(x) for x in line.split(\",\")[1:]]\n","\n","    temperature[i] = values[1]    # i 번째 온도\n","    raw_data[i, :] = values[:]    # i 번째 데이터"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ynuatgy6i2oK","executionInfo":{"status":"ok","timestamp":1638182153640,"user_tz":-540,"elapsed":3,"user":{"displayName":"유정식","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13391733907528682049"}},"outputId":"69b9270b-3e98-435c-c52c-eccd342e4e6d"},"source":["# 훈련셋, 검증셋, 테스트셋 크기 설정\n","\n","num_train_samples = int(0.5 * len(raw_data))     # 전체의 50%\n","num_val_samples   = int(0.25 * len(raw_data))    # 전체의 25%\n","num_test_samples  = len(raw_data) - num_train_samples - num_val_samples\n","\n","print(\"num_train_samples:\\t\", num_train_samples)\n","print(\"num_val_samples:\\t\", num_val_samples)\n","print(\"num_test_samples:\\t\", num_test_samples)"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["num_train_samples:\t 210225\n","num_val_samples:\t 105112\n","num_test_samples:\t 105114\n"]}]},{"cell_type":"code","metadata":{"id":"iaxEB7w6i-y2","executionInfo":{"status":"ok","timestamp":1638182154169,"user_tz":-540,"elapsed":530,"user":{"displayName":"유정식","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13391733907528682049"}}},"source":["# 데이터셋 정규화\n","\n","# 훈련셋의 평균\n","mean = raw_data[:num_train_samples].mean(axis=0)\n","raw_data -= mean\n","\n","# 훈련셋의 표준편차\n","std = raw_data[:num_train_samples].std(axis=0)\n","raw_data /= std"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"ksDPoMKljChZ","executionInfo":{"status":"ok","timestamp":1638182159595,"user_tz":-540,"elapsed":5428,"user":{"displayName":"유정식","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13391733907528682049"}}},"source":["# 5일 단위 시퀸스 데이터 준비\n","\n","from tensorflow import keras\n","\n","# 1시간에 하나의 데이터 선택\n","sampling_rate = 6\n","\n","# 입력 데이터 시퀀스: 지난 3일치(72시간) 온도 데이터\n","# 5일치가 아닌 3일치로 변경\n","sequence_length = 72\n","\n","# 타깃 설정:24시간 이후의 온도. 지연(delay)을 4일치로 지정\n","delay = sampling_rate * (sequence_length + 24 - 1)\n","\n","# 배치 크기\n","batch_size = 256\n","\n","# 훈련셋\n","train_dataset = keras.utils.timeseries_dataset_from_array(\n","    data=raw_data[:-delay],\n","    targets=temperature[delay:],\n","    sampling_rate=sampling_rate,\n","    sequence_length=sequence_length,\n","    shuffle=True, # 생성된 시퀀스들의 순서 무작위화\n","    batch_size=batch_size,\n","    start_index=0,\n","    end_index=num_train_samples)\n","\n","# 검증셋\n","val_dataset = keras.utils.timeseries_dataset_from_array(\n","    data=raw_data[:-delay],\n","    targets=temperature[delay:],\n","    sampling_rate=sampling_rate,\n","    sequence_length=sequence_length,\n","    shuffle=True,\n","    batch_size=batch_size,\n","    start_index=num_train_samples,\n","    end_index=num_train_samples + num_val_samples)\n","\n","# 테스트셋\n","test_dataset = keras.utils.timeseries_dataset_from_array(\n","    data=raw_data[:-delay],\n","    targets=temperature[delay:],\n","    sampling_rate=sampling_rate,\n","    sequence_length=sequence_length,\n","    shuffle=True,\n","    batch_size=batch_size,\n","    start_index=num_train_samples + num_val_samples)"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AbRDEHn_jhjq","executionInfo":{"status":"ok","timestamp":1638183750514,"user_tz":-540,"elapsed":1590926,"user":{"displayName":"유정식","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13391733907528682049"}},"outputId":"acb2ff6f-1260-4a34-e217-254f38f099de"},"source":["# LSTM 순환 모델 구현\n","\n","from tensorflow.keras import layers\n","\n","# 모델 구성\n","inputs = keras.Input(shape=(sequence_length, raw_data.shape[-1]))\n","\n","# GRU층 쌓기\n","x = layers.GRU(32, return_sequences=True)(inputs)   # 시간관계상 GRU층에 dropout은 적용시키지 못했습니다 ㅜㅜ\n","x = layers.GRU(32, return_sequences=True)(x)\n","x = layers.GRU(16, return_sequences=True)(inputs)   # 순환층을 추가하고 유닛수 바꾸기\n","x = layers.GRU(16)(x)\n","x = layers.Dropout(0.5)(x)  # Dropout 적용\n","\n","# 출력층\n","outputs = layers.Dense(1)(x)\n","\n","model = keras.Model(inputs, outputs)\n","\n","callbacks = [\n","    keras.callbacks.ModelCheckpoint(\"jena_lstm.keras\",\n","                                    save_best_only=True)\n","]\n","\n","# 모델 컴파일 및 실행\n","model.compile(optimizer=\"adam\", loss=\"mse\", metrics=[\"mae\"]) # 옵티마이저로 adam 사용\n","history = model.fit(train_dataset,\n","                    epochs=20,    # 과대적합이 발생하기 직전인 epochs 20까지만 학습\n","                    validation_data=val_dataset,\n","                    callbacks=callbacks)\n","\n","model = keras.models.load_model(\"jena_lstm.keras\")\n","print(f\"Test MAE: {model.evaluate(test_dataset)[1]:.2f}\")"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","820/820 [==============================] - 79s 88ms/step - loss: 44.9848 - mae: 4.9519 - val_loss: 17.4585 - val_mae: 3.0451\n","Epoch 2/20\n","820/820 [==============================] - 72s 87ms/step - loss: 20.6771 - mae: 3.4262 - val_loss: 11.0612 - val_mae: 2.4920\n","Epoch 3/20\n","820/820 [==============================] - 72s 87ms/step - loss: 17.9815 - mae: 3.2251 - val_loss: 9.8360 - val_mae: 2.3940\n","Epoch 4/20\n","820/820 [==============================] - 72s 87ms/step - loss: 16.7940 - mae: 3.1303 - val_loss: 9.2160 - val_mae: 2.3360\n","Epoch 5/20\n","820/820 [==============================] - 73s 88ms/step - loss: 16.0943 - mae: 3.0655 - val_loss: 9.0637 - val_mae: 2.3257\n","Epoch 6/20\n","820/820 [==============================] - 73s 88ms/step - loss: 15.5126 - mae: 3.0090 - val_loss: 8.9307 - val_mae: 2.3115\n","Epoch 7/20\n","820/820 [==============================] - 73s 88ms/step - loss: 14.8544 - mae: 2.9470 - val_loss: 9.2301 - val_mae: 2.3591\n","Epoch 8/20\n","820/820 [==============================] - 72s 88ms/step - loss: 14.1928 - mae: 2.8859 - val_loss: 8.9034 - val_mae: 2.3156\n","Epoch 9/20\n","820/820 [==============================] - 73s 88ms/step - loss: 13.6435 - mae: 2.8344 - val_loss: 9.2374 - val_mae: 2.3510\n","Epoch 10/20\n","820/820 [==============================] - 73s 89ms/step - loss: 13.1180 - mae: 2.7829 - val_loss: 9.1448 - val_mae: 2.3410\n","Epoch 11/20\n","820/820 [==============================] - 72s 88ms/step - loss: 12.6627 - mae: 2.7373 - val_loss: 9.1649 - val_mae: 2.3397\n","Epoch 12/20\n","820/820 [==============================] - 72s 87ms/step - loss: 12.3950 - mae: 2.7117 - val_loss: 9.3465 - val_mae: 2.3554\n","Epoch 13/20\n","820/820 [==============================] - 72s 88ms/step - loss: 12.0832 - mae: 2.6816 - val_loss: 9.4246 - val_mae: 2.3697\n","Epoch 14/20\n","820/820 [==============================] - 71s 87ms/step - loss: 11.8409 - mae: 2.6538 - val_loss: 9.5090 - val_mae: 2.3858\n","Epoch 15/20\n","820/820 [==============================] - 72s 87ms/step - loss: 11.5840 - mae: 2.6247 - val_loss: 9.5874 - val_mae: 2.3870\n","Epoch 16/20\n","820/820 [==============================] - 71s 87ms/step - loss: 11.4667 - mae: 2.6078 - val_loss: 9.7999 - val_mae: 2.4260\n","Epoch 17/20\n","820/820 [==============================] - 72s 87ms/step - loss: 11.2500 - mae: 2.5904 - val_loss: 9.9143 - val_mae: 2.4382\n","Epoch 18/20\n","820/820 [==============================] - 72s 87ms/step - loss: 11.0628 - mae: 2.5681 - val_loss: 9.8619 - val_mae: 2.4276\n","Epoch 19/20\n","820/820 [==============================] - 72s 87ms/step - loss: 10.9926 - mae: 2.5591 - val_loss: 9.9932 - val_mae: 2.4464\n","Epoch 20/20\n","820/820 [==============================] - 72s 87ms/step - loss: 10.8486 - mae: 2.5391 - val_loss: 9.9649 - val_mae: 2.4482\n","407/407 [==============================] - 22s 53ms/step - loss: 9.8205 - mae: 2.4614\n","Test MAE: 2.46\n"]}]},{"cell_type":"markdown","metadata":{"id":"Fs0Xp5x3Xbip"},"source":["테스트결과 기본상태에서 나온 2.64보다 성능이 더 좋은 2.46이 나왔다"]}]}